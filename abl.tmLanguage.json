{
  "fileTypes": [
    "p",
    "w",
    "i",
    "cls"
  ],
  "name": "OpenEdge ABL",
  "patterns": [
    {
      "include": "#statements"
    }
  ],
  "repository": {
    "procedure-definition": {
      "name": "meta.procedure.abl",
      "comment": "Look ahead to the procedure name, quoted or not. It will be resolved in the patterns",
      "begin": "(?i)\\s*(procedure|procedur|procedu|proced|proce)\\s+(?=[\\w'\"#\\$_])",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(?=:|\\.)",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.abl"
        }
      },
      "patterns": [
        {
          "match": "(?i)\\b(external|cdecl|pascal|stdcall|ordinal|persistent|thread-safe|in|super)\\b",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "include": "#string"
        },
        {
          "match": "([a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\&\\.]+)(?<!\\.)",
          "comment": "A procedure name may contain a . but cannot end in one, unless the procedure name is in quotes",
          "captures": {
            "1": {
              "name": "entity.name.function.abl"
            }
          }
        },
        {
          "include": "#argument-reference"
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "translation-attribute": {
      "comment": "The attribute must have one of L, R, T, or C and/or a U and/or one integer value. For example, R1 as the attribute value for Label.",
      "match": "(?i)(:[L|R|T|C|U]\\d*)\\b",
      "captures": {
        "1": {
          "name": "support.other.abl"
        }
      }
    },
    "language-functions": {
      "match": "(?i)\\b(opsys|proversion)\\b",
      "captures": {
        "1": {
          "name": "support.function.abl"
        }
      }
    },
    "method-definition": {
      "name": "meta.define.method.abl",
      "begin": "(?i)^\\s*(method|constructor)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "comment": "The lookahead on the regex for the closing colon is required to make this scope end properly",
      "end": "(?=:|\\.)",
      "patterns": [
        {
          "include": "#access-modifier"
        },
        {
          "match": "(?i)\\s*(void)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "comment": "The method name and parameters will only be correctly scoped if the method name and the opening brace/paren are on the same line.",
          "begin": "(?i)\\s*([a-z_]+[\\w\\-{}#$%&]*)\\s*(\\()\\s*",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.abl"
            },
            "2": {
              "name": "meta.brace.round.js"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "meta.brace.round.js"
            }
          },
          "patterns": [
            {
              "include": "#parameter-definition"
            }
          ]
        },
        {
          "include": "#string",
          "comment": "For the return type"
        },
        {
          "include": "#extent",
          "comment": "For the return type"
        },
        {
          "include": "#primitive-type",
          "comment": "For the return type"
        },
        {
          "include": "#dll-type",
          "comment": "For the return type"
        },
        {
          "include": "#type-name-generic-progress",
          "comment": "For the return type"
        },
        {
          "include": "#type-name-progress",
          "comment": "For the return type"
        },
        {
          "include": "#type-name-generic",
          "comment": "For the return type"
        },
        {
          "include": "#type-name",
          "comment": "For the return type"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "end-function-procedure-method-block": {
      "match": "(?i)\\s*(end)\\s*(method|procedure|function)?\\s*(?=\\.)\\s*",
      "comment": "This regex exists to make sure that END PROCEDURE is not seen as a new procedure block",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        }
      }
    },
    "as-type": {
      "begin": "(?i)\\s*(as)\\s*(class)?",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        }
      },
      "end": "\\s*(\\.|\\,|\\s*)",
      "patterns": [
        {
          "include": "#primitive-type"
        },
        {
          "include": "#type-name-generic-progress"
        },
        {
          "include": "#type-name-progress"
        },
        {
          "include": "#type-name-generic"
        },
        {
          "include": "#type-name"
        }
      ]
    },
    "parameter-definition": {
      "name": "meta.define.parameter.abl",
      "patterns": [
        {
          "match": "(?i)\\s*(input-output|input-outpu|input-outp|input-out|input-ou|input-o|input|output|append|bind|by-value|preselect|buffer|parameter|param|no-undo)\\s*",
          "comment": "Certain keywords like NO-UNDO are 'gathered' by a DEFINE INPUT PARAMETER statement. ",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "match": "(?i)\\s*(dataset-handle|table-handle)\\s+([\\w\\-]+)",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            },
            "2": {
              "name": "variable.parameter.abl"
            }
          }
        },
        {
          "match": "(?i)\\s*(dataset|table)\\s+([\\w\\-]+)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            },
            "2": {
              "name": "storage.data.table.abl"
            }
          }
        },
        {
          "include": "#parameter-as"
        },
        {
          "match": "(?i)\\s*(character|characte|charact|charac|chara|char|com-handle|date|datetime-tz|datetime|decimal|decima|decim|deci|dec|handle|int64|integer|intege|integ|inte|int|logical|logica|logic|logi|log|longchar|longcha|longch|memptr|raw|recid|rowid|widget-handle|widget-h?)(?![=\\w-])\\s*(,*)",
          "captures": {
            "1": {
              "name": "storage.type.abl"
            },
            "2": {
              "name": "punctuation.separator.comma.abl"
            }
          }
        },
        {
          "match": "\\s*(,)\\s*",
          "captures": {
            "1": {
              "name": "punctuation.separator.comma.abl"
            }
          }
        },
        {
          "include": "#buffer-for-table"
        },
        {
          "include": "#extent"
        },
        {
          "include": "#property-call"
        },
        {
          "include": "#abl-functions"
        },
        {
          "include": "#array-literal"
        },
        {
          "include": "#decimals"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#type-name-generic-progress"
        },
        {
          "include": "#type-name-progress"
        },
        {
          "include": "#abl-system-handles"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#handle-attributes"
        },
        {
          "include": "#abl-functions"
        },
        {
          "include": "#type-name-generic"
        },
        {
          "include": "#type-name"
        },
        {
          "include": "#string"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "function-parameter-definition": {
      "comment": "https://docs.progress.com/bundle/abl-reference/page/Parameter-definition-syntax.html?labelkey=product_openedge_126",
      "name": "meta.function.parameters",
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#parameter-definition"
        }
      ]
    },
    "statements": {
      "name": "meta.statements.abl",
      "patterns": [
        {
          "include": "#release"
        },
        {
          "include": "#copy-lob"
        },
        {
          "include": "#event-un-subscribe"
        },
        {
          "include": "#create-buffer"
        },
        {
          "include": "#buffer-name"
        },
        {
          "include": "#temp-table-name"
        },
        {
          "include": "#annotation"
        },
        {
          "include": "#undo-statement"
        },
        {
          "include": "#block-statement"
        },
        {
          "include": "#block-label"
        },
        {
          "include": "#end-block"
        },
        {
          "include": "#end-function-procedure-method-block"
        },
        {
          "include": "#find-record"
        },
        {
          "include": "#type-argument-function"
        },
        {
          "include": "#get-class"
        },
        {
          "include": "#if-then"
        },
        {
          "include": "#string"
        },
        {
          "include": "#translation-attribute"
        },
        {
          "include": "#break-group"
        },
        {
          "include": "#event-un-subscribe"
        },
        {
          "include": "#property-call"
        },
        {
          "include": "#handle-attributes"
        },
        {
          "include": "#abl-functions"
        },
        {
          "include": "#unqualified-method-call"
        },
        {
          "include": "#function-arguments"
        },
        {
          "include": "#method-definition"
        },
        {
          "include": "#access-modifier"
        },
        {
          "match": "(?i)\\s*(void)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "include": "#parens"
        },
        {
          "include": "#singlelinecomment"
        },
        {
          "include": "#multilinecomment"
        },
        {
          "include": "#declarations"
        },
        {
          "include": "#decimals"
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#timestamp-constant"
        },
        {
          "include": "#for-join"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#analyze-suspend-resume"
        },
        {
          "include": "#global-scoped-define"
        },
        {
          "include": "#label-variable"
        },
        {
          "include": "#define-field"
        },
        {
          "include": "#define-like"
        },
        {
          "include": "#format-constant"
        },
        {
          "include": "#preprocessors"
        },
        {
          "include": "#procedure-definition"
        },
        {
          "include": "#dll-type"
        },
        {
          "include": "#parameter-as"
        },
        {
          "include": "#buffer-for-table"
        },
        {
          "include": "#primitive-type"
        },
        {
          "include": "#property-accessor"
        },
        {
          "include": "#type-reference"
        },
        {
          "include": "#for-each-table"
        },
        {
          "include": "#for-each-join"
        },
        {
          "include": "#of-phrase"
        },
        {
          "include": "#db-dot-table-dot-field",
          "comment": "this include must be after any type references so that eg get-class(package.type) can continue to work"
        },
        {
          "include": "#code-block"
        },
        {
          "include": "#language-functions"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#array-literal"
        },
        {
          "include": "#punctuation-semicolon"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#punctuation-colon"
        },
        {
          "include": "#parens"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#variable-name"
        },
        {
          "include": "#punctuation-period"
        },
        {
          "include": "#punctuation-colon"
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "include": "#define"
        }
      ]
    },
    "preprocessors": {
      "match": "(?i)(\\&[\\w-]*)|({\\&[\\w-]*})|(&window-system|&text-height|&line-number|&batch-mode|&file-name|&undefine|&sequence|&message|defined|&elseif|&scoped|&global|&opsys|&endif|&else|&scop|&then|&glob|&if)",
      "name": "storage.type.function.abl"
    },
    "type-names": {
      "patterns": [
        {
          "include": "#type-name-generic-progress"
        },
        {
          "include": "#type-name-progress"
        },
        {
          "include": "#type-name-generic"
        },
        {
          "include": "#type-name"
        }
      ]
    },
    "type-reference": {
      "patterns": [
        {
          "include": "#define-type"
        },
        {
          "include": "#get-class"
        },
        {
          "include": "#new-class"
        },
        {
          "include": "#using"
        },
        {
          "include": "#type-argument-function"
        }
      ]
    },
    "using": {
      "name": "meta.using.abl",
      "begin": "(?i)\\s*(using)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(\\.)",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.abl"
        }
      },
      "patterns": [
        {
          "comment": "Captures USING foo.bar.* .",
          "match": "(?i)\\s*((([\\w\\#\\$\\%]+|progress)(\\.[\\w\\#\\$\\%]+)*)\\.\\*)\\s*",
          "captures": {
            "1": {
              "name": "entity.name.package.abl"
            }
          }
        },
        {
          "match": "(?i)\\s*(from|propath|assembly)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "include": "#type-name"
        }
      ]
    },
    "define-type": {
      "patterns": [
        {
          "include": "#define-class"
        },
        {
          "include": "#define-interface"
        },
        {
          "include": "#define-enum-type"
        }
      ]
    },
    "type-name-generic-progress": {
      "name": "entity.name.type.generic.abl",
      "begin": "(?i)\\s*((progress)(\\.[\\w\\#\\$\\%\\-]+)*)\\s*<",
      "beginCaptures": {
        "1": {
          "name": "entity.name.type.abl"
        }
      },
      "end": "\\>",
      "patterns": [
        {
          "include": "#generic-types"
        }
      ]
    },
    "type-name-generic": {
      "name": "entity.name.type.generic.abl",
      "begin": "(?i)\\s*(([\\w\\#\\$\\%\\-]+)(\\.[\\w\\#\\$\\%\\-]+)*\\s*)\\s*<",
      "beginCaptures": {
        "1": {
          "name": "entity.name.type.abl"
        }
      },
      "end": "\\>",
      "patterns": [
        {
          "include": "#generic-types"
        }
      ]
    },
    "generic-types": {
      "patterns": [
        {
          "include": "#type-name-comma-progress"
        },
        {
          "include": "#type-name-comma"
        },
        {
          "include": "#type-name-generic-progress"
        },
        {
          "include": "#type-name-progress"
        },
        {
          "include": "#type-name-generic"
        },
        {
          "include": "#type-name"
        }
      ]
    },
    "type-name": {
      "match": "(?i)\\b([\\w\\#\\$\\%\\-]+(\\.[\\w\\#\\$\\%\\-]+)*)\\b",
      "captures": {
        "1": {
          "name": "entity.name.type.abl"
        }
      }
    },
    "type-name-comma": {
      "match": "(?i)\\s*(,*)\\s*(class)?\\s+(([\\w\\#\\$\\%]+)(\\.?[\\w\\#\\$\\%]*)*(?<!\\.))\\s*(,*)\\s*",
      "comment": "Capture group 3 is the <T> type name",
      "captures": {
        "1": {
          "name": "punctuation.separator.comma.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        },
        "3": {
          "name": "entity.name.type.abl"
        },
        "6": {
          "name": "punctuation.separator.comma.abl"
        }
      }
    },
    "type-name-progress": {
      "match": "(?i)\\s*((progress\\.)([\\.\\w\\#\\$\\%]+)*)\\s*(?<!\\.)",
      "captures": {
        "1": {
          "name": "entity.name.type.abl"
        }
      }
    },
    "type-name-comma-progress": {
      "match": "(?i)\\s*(,*)\\s*(class)?\\s*((progress\\.|map|set)(\\.?[\\w\\#\\$\\%]*)*(?<!\\.))\\s*(,*)\\s*",
      "comment": "Capture group 3 is the <T> type name",
      "captures": {
        "1": {
          "name": "punctuation.separator.comma.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        },
        "3": {
          "name": "entity.name.type.abl"
        },
        "6": {
          "name": "punctuation.separator.comma.abl"
        }
      }
    },
    "define-class": {
      "name": "meta.define.class.abl",
      "begin": "(?i)\\b(class)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "\\s*(:)\\s*",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.abl"
        }
      },
      "patterns": [
        {
          "match": "(?i)\\s*(serializable|abstract|final|use-widget-pool|inherits|implements)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "include": "#type-name-generic-progress"
        },
        {
          "include": "#type-name-generic"
        },
        {
          "include": "#type-name-comma-progress"
        },
        {
          "include": "#type-name-progress"
        },
        {
          "include": "#type-name-comma"
        },
        {
          "include": "#type-name"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "handle-attributes": {
      "patterns": [
        {
          "include": "#handle-attributes-A"
        },
        {
          "include": "#handle-attributes-B"
        },
        {
          "include": "#handle-attributes-C"
        },
        {
          "include": "#handle-attributes-D"
        },
        {
          "include": "#handle-attributes-E"
        },
        {
          "include": "#handle-attributes-F"
        },
        {
          "include": "#handle-attributes-G"
        },
        {
          "include": "#handle-attributes-H"
        },
        {
          "include": "#handle-attributes-I"
        },
        {
          "include": "#handle-attributes-K"
        },
        {
          "include": "#handle-attributes-L"
        },
        {
          "include": "#handle-attributes-M"
        },
        {
          "include": "#handle-attributes-N"
        },
        {
          "include": "#handle-attributes-O"
        },
        {
          "include": "#handle-attributes-P"
        },
        {
          "include": "#handle-attributes-Q"
        },
        {
          "include": "#handle-attributes-R"
        },
        {
          "include": "#handle-attributes-S"
        },
        {
          "include": "#handle-attributes-T"
        },
        {
          "include": "#handle-attributes-U"
        },
        {
          "include": "#handle-attributes-V"
        },
        {
          "include": "#handle-attributes-W"
        },
        {
          "include": "#handle-attributes-X"
        },
        {
          "include": "#handle-attributes-Y"
        }
      ]
    },
    "handle-attributes-A": {
      "match": "(?i)(:)(ACCELERATOR|ACCEPT-CHANGES|ACCEPT-ROW-CHANGES|ACTIVE|ACTOR|ADD-BUFFER|add-calc-col|add-calc-colu|add-calc-colum|add-calc-column|ADD-COLUMNS-FROM|add-events-proc|add-events-proce|add-events-proced|add-events-procedu|add-events-procedur|add-events-procedure|ADD-FIELDS-FROM|ADD-FIRST|ADD-HEADER-ENTRY|ADD-INDEX-FIELD|ADD-LAST|add-like-col|add-like-colu|add-like-colum|add-like-column|ADD-LIKE-FIELD|ADD-LIKE-INDEX|ADD-NEW-FIELD|ADD-NEW-INDEX|ADD-PARENT-ID-RELATION|add-rel|add-rela|add-relat|add-relati|add-relatio|add-relation|ADD-SCHEMA-LOCATION|ADD-SOURCE-BUFFER|add-super-proc|add-super-proce|add-super-proced|add-super-procedu|add-super-procedur|add-super-procedure|ADM-DATA|AFTER-BUFFER|AFTER-ROWID|AFTER-TABLE|ALLOW-COLUMN-SEARCHING|ALLOW-PREV-DESERIALIZATION|ALWAYS-ON-TOP|ambig|ambigu|ambiguo|ambiguou|ambiguous|APPEND-CHILD|appl-alert|appl-alert-|appl-alert-b|appl-alert-bo|appl-alert-box|appl-alert-boxe|appl-alert-boxes|APPL-CONTEXT-ID|APPLY-CALLBACK|APPSERVER-INFO|APPSERVER-PASSWORD|APPSERVER-USERID|ASYNCHRONOUS|ASYNC-REQUEST-COUNT|ASYNC-REQUEST-HANDLE|ATTACH-DATA-SOURCE|ATTACHED-PAIRLIST|ATTRIBUTE-NAMES|attr|attr-|attr-s|attr-sp|attr-spa|attr-spac|attr-space|AUDIT-EVENT-CONTEXT|AUTHENTICATION-FAILED|auto-comp|auto-compl|auto-comple|auto-complet|auto-completi|auto-completio|auto-completion|AUTO-DELETE|AUTO-DELETE-XML|auto-end-key|auto-endkey|AUTO-GO|auto-ind|auto-inde|auto-inden|auto-indent|AUTO-RESIZE|auto-ret|auto-retu|auto-retur|auto-return|AUTO-SYNCHRONIZE|auto-val|auto-vali|auto-valid|auto-valida|auto-validat|auto-validate|auto-z|auto-za|auto-zap|avail|availa|availab|availabl|available|AVAILABLE-FORMATS)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-B": {
      "match": "(?i)(:)(back|back-tab|backg|backgr|backgro|backgrou|backgroun|background|BASE-ADE|BASIC-LOGGING|BATCH-MODE|BATCH-SIZE|BEFORE-BUFFER|BEFORE-ROWID|BEFORE-TABLE|BEGIN-EVENT-GROUP|bgc|bgco|bgcol|bgcolo|bgcolor|BLANK|BLOCK-ITERATION-DISPLAY|border-b|border-bo|border-bot|border-bott|border-botto|border-bottom|border-bottom-c|border-bottom-ch|border-bottom-cha|border-bottom-char|border-bottom-chars|border-bottom-p|border-bottom-pi|border-bottom-pix|border-bottom-pixe|border-bottom-pixel|border-bottom-pixels|border-l|border-le|border-lef|border-left|border-left-c|border-left-ch|border-left-cha|border-left-char|border-left-chars|border-left-p|border-left-pi|border-left-pix|border-left-pixe|border-left-pixel|border-left-pixels|border-r|border-ri|border-rig|border-righ|border-right|border-right-c|border-right-ch|border-right-cha|border-right-char|border-right-chars|border-right-p|border-right-pi|border-right-pix|border-right-pixe|border-right-pixel|border-right-pixels|border-t|border-to|border-top|border-top-c|border-top-ch|border-top-cha|border-top-char|border-top-chars|border-top-p|border-top-pi|border-top-pix|border-top-pixe|border-top-pixel|border-top-pixels|BOX|BOX-SELECTABLE|BUFFER-CHARS|buffer-comp|buffer-compa|buffer-compar|buffer-compare|BUFFER-COPY|BUFFER-CREATE|BUFFER-DELETE|BUFFER-FIELD|BUFFER-FIELD|BUFFER-GROUP-ID|BUFFER-GROUP-NAME|BUFFER-HANDLE|BUFFER-LINES|buffer-n|buffer-na|buffer-nam|buffer-name|BUFFER-PARTITION-ID|buffer-releas|buffer-release|BUFFER-TENANT-ID|BUFFER-TENANT-NAME|BUFFER-VALIDATE|BUFFER-VALUE|BYTES-READ|BYTES-WRITTEN)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-C": {
      "match": "(?i)(:)(CACHE|CALL-NAME|CALL-TYPE|CANCEL-BREAK|CANCEL-BUTTON|CANCEL-REQUESTS|CANCEL-REQUESTS-AFTER|CANCELLED|can-crea|can-creat|can-create|can-dele|can-delet|can-delete|CAN-DO-DOMAIN-SUPPORT|CAN-READ|CAN-WRITE|CAREFUL-PAINT|case-sen|case-sens|case-sensi|case-sensit|case-sensiti|case-sensitiv|case-sensitive|center|centere|centered|CHARSET|CHECKED|CHILD-BUFFER|CHILD-NUM|CLASS-TYPE|CLEAR|CLEAR-APPL-CONTEXT|CLEAR-LOG|clear-select|clear-selecti|clear-selectio|clear-selection|clear-sort-arrow|clear-sort-arrows|CLIENT-CONNECTION-ID|CLIENT-TTY|CLIENT-TYPE|CLIENT-WORKSTATION|CLONE-NODE|CLOSE-LOG|CODE|CODEPAGE|COLUMN|column-bgc|column-bgco|column-bgcol|column-bgcolo|column-bgcolor|COLUMN-DCOLOR|column-fgc|column-fgco|column-fgcol|column-fgcolo|column-fgcolor|COLUMN-FONT|column-lab|column-labe|column-label|COLUMN-MOVABLE|column-pfc|column-pfco|column-pfcol|column-pfcolo|column-pfcolor|COLUMN-READ-ONLY|COLUMN-RESIZABLE|column-sc|column-scr|column-scro|column-scrol|column-scroll|column-scrolli|column-scrollin|column-scrolling|COM-HANDLE|COMPLETE|CONFIG-NAME|CONNECT|CONNECTED|CONTEXT-HELP|CONTEXT-HELP-FILE|CONTEXT-HELP-ID|CONTROL-BOX|convert-3d|convert-3d-|convert-3d-c|convert-3d-co|convert-3d-col|convert-3d-colo|convert-3d-color|convert-3d-colors|convert-to-offs|convert-to-offse|convert-to-offset|COPY-DATASET|COPY-SAX-ATTRIBUTES|COPY-TEMP-TABLE|COVERAGE|CPCASE|CPCOLL|cpint|cpinte|cpinter|cpintern|cpinterna|cpinternal|CPLOG|CPPRINT|CPRCODEIN|CPRCODEOUT|CPSTREAM|CPTERM|crc-val|crc-valu|crc-value|CREATE-LIKE|CREATE-LIKE-SEQUENTIAL|CREATE-NODE|CREATE-NODE-NAMESPACE|CREATE-RESULT-LIST-ENTRY|CURRENT-CHANGED|CURRENT-COLUMN|current-env|current-envi|current-envir|current-enviro|current-environ|current-environm|current-environme|current-environmen|current-environment|CURRENT-ITERATION|CURRENT-QUERY|CURRENT-REQUEST-INFO|CURRENT-RESPONSE-INFO|CURRENT-RESULT-ROW|CURRENT-ROW-MODIFIED|CURRENT-WINDOW|curs|curso|cursor|cursor-char|CURSOR-LINE|CURSOR-OFFSET)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-D": {
      "match": "(?i)(:)(data-entry-ret|data-entry-retu|data-entry-retur|data-entry-return|DATA-SOURCE|DATA-SOURCE-COMPLETE-MAP|DATA-SOURCE-MODIFIED|DATA-SOURCE-ROWID|data-t|data-ty|data-typ|data-type|DATASET|date-f|date-fo|date-for|date-form|date-forma|date-format|DB-CONTEXT|DB-LIST|DB-REFERENCES|DBNAME|DCOLOR|DDE-ERROR|dde-i|dde-id|DDE-ITEM|DDE-NAME|DDE-TOPIC|DEBLANK|debu|debug|debug-alert|dec|deci|decim|decima|decimal|decimals|DECLARE-NAMESPACE|DEFAULT|DEFAULT-BUFFER-HANDLE|default-but|default-butt|default-butto|default-button|DEFAULT-COMMIT|DEFAULT-STRING|DEFAULT-VALUE|DELETE|DELETE-CHAR|DELETE-CURRENT-ROW|DELETE-HEADER-ENTRY|DELETE-LINE|DELETE-NODE|DELETE-RESULT-LIST-ENTRY|DELETE-SELECTED-ROW|DELETE-SELECTED-ROWS|DELIMITER|descript|descripti|descriptio|description|DESELECT-FOCUSED-ROW|DESELECT-ROWS|DESELECT-SELECTED-ROW|DETACH-DATA-SOURCE|dir|directory|DISABLE|DISABLE-AUTO-ZAP|DISABLE-CONNECTIONS|DISABLE-DUMP-TRIGGERS|DISABLE-LOAD-TRIGGERS|discon|disconn|disconne|disconnec|disconnect|DISPLAY-MESSAGE|display-t|display-timezone|display-ty|display-typ|display-typess|DOMAIN-DESCRIPTION|DOMAIN-NAME|DOMAIN-TYPE|DOWN|DRAG-ENABLED|DROP-TARGET|DUMP-LOGGING-NOW|DYNAMIC)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-E": {
      "match": "(?i)(:)(edge-c|edge-ch|edge-cha|edge-char|edge-chars|edge-p|edge-pi|edge-pix|edge-pixe|edge-pixel|edge-pixels|EDIT-CAN-PASTE|EDIT-CAN-UNDO|EDIT-CLEAR|EDIT-COPY|EDIT-CUT|EDIT-PASTE|EDIT-UNDO|EMPTY|EMPTY-DATASET|EMPTY-TEMP-TABLE|ENABLE|ENABLE-CONNECTIONS|ENABLE-EVENTS|ENABLED|ENCODE-DOMAIN-ACCESS-CODE|ENCODING|ENCRYPT-AUDIT-MAC-KEY|ENCRYPTION-SALT|END-DOCUMENT|END-ELEMENT|END-EVENT-GROUP|END-FILE-DROP|END-USER-PROMPT|ENTITY-EXPANSION-LIMIT|ENTRY|ENTRY-TYPES-LIST|ERROR|error-col|error-colu|error-colum|error-columnsss|ERROR-OBJECT|ERROR-OBJECT-DETAIL|ERROR-ROW|ERROR-STACK-TRACE|ERROR-STRING|EVENT-GROUP-ID|EVENT-HANDLER|EVENT-HANDLER-OBJECT|EVENT-PROCEDURE|EVENT-PROCEDURE-CONTEXT|event-ty|event-typ|event-type|EXCLUSIVE-ID|EXECUTION-LOG|EXIT-CODE|EXPAND|EXPANDABLE|EXPORT|EXPORT-PRINCIPAL|EXTENT)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-F": {
      "match": "(?i)(:)(FETCH-SELECTED-ROW|FGCOfgc|fgco|fgcol|fgcolo|fgcolorLOR|file-create-d|file-create-da|file-create-dat|file-create-date|file-create-t|file-create-ti|file-create-tim|file-create-time|file-mod-d|file-mod-da|file-mod-dat|file-mod-date|file-mod-t|file-mod-ti|file-mod-tim|file-mod-time|FILE-NAME|file-off|file-offs|file-offse|file-offset|FILE-SIZE|FILE-TYPE|FILL|FILLED|FILL-MODE|FILL-WHERE-STRING|FIND-BY-ROWID|FIND-CURRENT|FIND-FIRST|FIND-LAST|FIND-UNIQUE|first-async|first-async-|first-async-r|first-async-re|first-async-req|first-async-requ|first-async-reque|first-async-reques|first-async-request|FIRST-BUFFER|FIRST-CHILD|FIRST-COLUMN|FIRST-DATASET|FIRST-DATA-SOURCE|FIRST-FORM|FIRST-OBJECT|FIRST-OF|first-proc|first-proce|first-proced|first-procedu|first-procedur|first-procedure|FIRST-QUERY|first-serv|first-serve|first-server|first-server-socket|FIRST-SOCKET|first-tab-i|first-tab-it|first-tab-ite|first-tab-item|FIT-LAST-COLUMN|FLAT-BUTTON|FOCUSED-ROW|FOCUSED-ROW-SELECTED|FONT|fore|foreg|foregr|foregro|foregrou|foregroun|foreground|FOREIGN-KEY-HIDDEN|FORM-INPUT|FORM-LONG-INPUT|forma|format|formatte|formatted|FORWARD-ONLY|fragmen|fragment|fram|frame|FRAME-COL|FRAME-NAME|FRAME-ROW|frame-spa|frame-spac|frame-spaci|frame-spacin|frame-spacing|FRAME-X|FRAME-Y|FREQUENCY|full-height|full-height-c|full-height-ch|full-height-cha|full-height-char|full-height-chars|full-height-p|full-height-pi|full-height-pix|full-height-pixe|full-height-pixel|full-height-pixels|full-pathn|full-pathna|full-pathnam|full-pathname|full-width-|full-width-c|full-width-ch|full-width-cha|full-width-char|full-width-chars|full-width-p|full-width-pi|full-width-pix|full-width-pixe|full-width-pixel|full-width-pixels|FUNCTION)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-G": {
      "match": "(?i)(:)(GET-ATTRIBUTE|GET-ATTRIBUTE-NODE|GET-BINARY-DATA|get-blue|get-blue-|get-blue-v|get-blue-va|get-blue-val|get-blue-valu|get-blue-value|get-browse-col|get-browse-colu|get-browse-colum|get-browse-column|GET-BUFFER-HANDLE|GET-BYTES-AVAILABLE|GET-CALLBACK-PROC-CONTEXT|GET-CALLBACK-PROC-NAME|GET-CGI-LIST|GET-CGI-VALUE|GET-CGI-LONG-VALUE|GET-CHANGES|GET-CHILD|get-child-rel|get-child-rela|get-child-relat|get-child-relati|get-child-relatio|get-child-relation|GET-CLIENT|GET-COLUMN|GET-CONFIG-VALUE|get-curr|get-curre|get-curren|get-current|GET-DATASET-BUFFER|GET-DOCUMENT-ELEMENT|GET-DROPPED-FILE|GET-DYNAMIC|GET-ERROR-COLUMN|GET-ERROR-ROW|GET-FILE-NAME|get-file-offse|get-file-offset|get-firs|get-first|get-green|get-green-|get-green-v|get-green-va|get-green-val|get-green-valu|get-green-value|get-header-entr|get-header-entry|GET-INDEX-BY-NAMESPACE-NAME|GET-INDEX-BY-QNAME|GET-ITERATION|GET-LAST|GET-LOCALNAME-BY-INDEX|GET-MESSAGE|GET-MESSAGE-TYPE|GET-NEXT|GET-NODE|GET-NUMBER|GET-PARENT|GET-PREV|GET-PRINTERS|GET-QNAME-BY-INDEX|get-red|get-red-|get-red-v|get-red-va|get-red-val|get-red-valu|get-red-value|get-rel|get-rela|get-relat|get-relati|get-relatio|get-relation|GET-REPOSITIONED-ROW|get-rgb|get-rgb-|get-rgb-v|get-rgb-va|get-rgb-val|get-rgb-valu|get-rgb-values|GET-ROW|GET-SAFE-USER|get-selected|get-selected-|get-selected-w|get-selected-wi|get-selected-wid|get-selected-widg|get-selected-widge|get-selected-widget|GET-SERIALIZED|GET-SIGNATURE|GET-SOCKET-OPTION|GET-SOURCE-BUFFER|GET-TAB-ITEM|get-text-height|get-text-height-c|get-text-height-ch|get-text-height-cha|get-text-height-char|get-text-height-chars|get-text-height-p|get-text-height-pi|get-text-height-pix|get-text-height-pixe|get-text-height-pixel|get-text-height-pixels|get-text-width|get-text-width-c|get-text-width-ch|get-text-width-cha|get-text-width-char|get-text-width-chars|get-text-width-p|get-text-width-pi|get-text-width-pix|get-text-width-pixe|get-text-width-pixel|get-text-width-pixels|GET-TOP-BUFFER|GET-TYPE-BY-INDEX|GET-TYPE-BY-NAMESPACE-NAME|GET-TYPE-BY-QNAME|GET-URI-BY-INDEX|GET-VALUE-BY-INDEX|GET-VALUE-BY-NAMESPACE-NAME|GET-VALUE-BY-QNAME|get-wait|get-wait-|get-wait-s|get-wait-st|get-wait-sta|get-wait-stat|get-wait-state|graphic-e|graphic-ed|graphic-edg|graphic-edge|grid-factor-h|grid-factor-ho|grid-factor-hor|grid-factor-hori|grid-factor-horiz|grid-factor-horizo|grid-factor-horizon|grid-factor-horizont|grid-factor-horizonta|grid-factor-horizontal|grid-factor-v|grid-factor-ve|grid-factor-ver|grid-factor-vert|grid-factor-verti|grid-factor-vertic|grid-factor-vertica|grid-factor-vertical|GRID-SNAP|grid-unit-height|grid-unit-height-c|grid-unit-height-ch|grid-unit-height-cha|grid-unit-height-char|grid-unit-height-chars|grid-unit-height-p|grid-unit-height-pi|grid-unit-height-pix|grid-unit-height-pixe|grid-unit-height-pixel|grid-unit-height-pixels|grid-unit-width|grid-unit-width-c|grid-unit-width-ch|grid-unit-width-cha|grid-unit-width-char|grid-unit-width-chars|grid-unit-width-p|grid-unit-width-pi|grid-unit-width-pix|grid-unit-width-pixe|grid-unit-width-pixel|grid-unit-width-pixels|GRID-VISIBLE|GROUP-BOX)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-H": {
      "match": "(?i)(:)(HANDLE|HANDLER|HAS-LOBS|HAS-RECORDS|height|height-c|height-ch|height-cha|height-char|height-chars|height-p|height-pi|height-pix|height-pixe|height-pixel|height-pixels|HELP|HIDDEN|horizo|horizon|horizont|horizonta|horizontal|HTML-CHARSET|HTML-END-OF-LINE|HTML-END-OF-PAGE|HTML-FRAME-BEGIN|HTML-FRAME-END|HTML-HEADER-BEGIN|HTML-HEADER-END|HTML-TITLE-BEGIN|HTML-TITLE-END|HWND)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-I": {
      "match": "(?i)(:)(icfparam|icfparame|icfparamet|icfparamete|icfparameter|ICON|ignore-current-mod|ignore-current-modi|ignore-current-modif|ignore-current-modifi|ignore-current-modifie|ignore-current-modified|IMAGE|IMAGE-DOWN|IMAGE-INSENSITIVE|IMAGE-UP|IMMEDIATE-DISPLAY|IMPORT-NODE|IMPORT-PRINCIPAL|INCREMENT-EXCLUSIVE-ID|INDEX|index-info|index-infor|index-inform|index-informa|index-informat|index-informati|index-informatio|index-information|IN-HANDLE|inherit-bgc|inherit-bgco|inherit-bgcol|inherit-bgcolo|inherit-bgcolor|inherit-fgc|inherit-fgco|inherit-fgcol|inherit-fgcolo|inherit-fgcolor|init|initial|INITIALIZE|INITIALIZE-DOCUMENT-TYPE|INITIATE|INNER-CHARS|INNER-LINES|INPUT-VALUE|INSERT|INSERT-ATTRIBUTE|insert-b|insert-ba|insert-bac|insert-back|insert-backt|insert-backta|insert-backtab|INSERT-BEFORE|INSERT-FILE|INSERT-ROW|INSERT-STRING|insert-t|insert-ta|insert-tab|INSTANTIATING-PROCEDURE|INTERNAL-ENTRIES|INVOKE|IS-CLASS|IS-JSON|IS-MULTI-TENANT|IS-OPEN|IS-PARAMETER-SET|is-partitione|is-partitioned|IS-ROW-SELECTED|IS-SELECTED|IS-XML|ITEMS-PER-ROW)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-K": {
      "match": "(?i)(:)(KEEP-CONNECTION-OPEN|keep-frame-z|keep-frame-z-|keep-frame-z-o|keep-frame-z-or|keep-frame-z-ord|keep-frame-z-orde|keep-frame-z-order|KEEP-SECURITY-CACHE|KEY|KEYS)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-L": {
      "match": "(?i)(:)(LABEL|label-bgc|label-bgco|label-bgcol|label-bgcolo|label-bgcolor|label-dc|label-dco|label-dcol|label-dcolo|label-dcolor|label-fgc|label-fgco|label-fgcol|label-fgcolo|label-fgcolor|LABEL-FONT|LABELS|LABELS-HAVE-COLONS|language|languages|LARGE|LARGE-TO-SMALL|last-async|last-async-|last-async-r|last-async-re|last-async-req|last-async-requ|last-async-reque|last-async-reques|last-async-request|LAST-BATCH|LAST-CHILD|last-even|last-event|LAST-FORM|LAST-OBJECT|LAST-OF|last-proce|last-proced|last-procedu|last-procedur|last-procedure|last-serv|last-serve|last-server|last-server-socket|LAST-SOCKET|last-tab-i|last-tab-it|last-tab-ite|last-tab-item|LENGTH|LIBRARY|LIBRARY-CALLING-CONVENTION|LINE|LIST-ITEM-PAIRS|LIST-ITEMS|LISTINGS|LITERAL-QUESTION|LOAD|LOAD-DOMAINS|LOAD-ICON|LOAD-IMAGE|LOAD-IMAGE-DOWN|LOAD-IMAGE-INSENSITIVE|LOAD-IMAGE-UP|load-mouse-p|load-mouse-po|load-mouse-poi|load-mouse-poin|load-mouse-point|load-mouse-pointe|load-mouse-pointer|LOAD-SMALL-ICON|LOCAL-HOST|LOCAL-NAME|LOCAL-PORT|LOCAL-VERSION-INFO|LOCATOR-COLUMN-NUMBER|LOCATOR-LINE-NUMBER|LOCATOR-PUBLIC-ID|LOCATOR-SYSTEM-ID|LOCATOR-TYPE|LOCKED|LOCK-REGISTRATION|LOG-AUDIT-EVENT|LOG-ENTRY-TYPES|LOG-THRESHOLD|LOGFILE-NAME|LOGGING-LEVEL|LOGIN-EXPIRATION-TIMESTAMP|LOGIN-HOST|LOGIN-STATE|LOGOUT|LONGCHAR-TO-NODE-VALUE|LOOKUP)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-M": {
      "match": "(?i)(:)(MANDATORY|MANUAL-HIGHLIGHT|MARK-NEW|MARK-ROW-STATE|MAX-BUTTON|MAX-CHARS|MAX-DATA-GUESS|max-height|max-height-c|max-height-ch|max-height-cha|max-height-char|max-height-chars|max-height-p|max-height-pi|max-height-pix|max-height-pixe|max-height-pixel|max-height-pixels|MAXIMUM-LEVEL|max-val|max-valu|max-value|max-width|max-width-c|max-width-ch|max-width-cha|max-width-char|max-width-chars|max-width-p|max-width-pi|max-width-pix|max-width-pixe|max-width-pixel|max-width-pixels|MEMPTR-TO-NODE-VALUE|MENU-BAR|menu-k|menu-ke|menu-key|menu-m|menu-mo|menu-mou|menu-mous|menu-mouse|MERGE-BY-FIELD|MERGE-CHANGES|MERGE-ROW-CHANGES|MESSAGE-AREA|MESSAGE-AREA-FONT|MIN-BUTTON|min-column-width-c|min-column-width-ch|min-column-width-cha|min-column-width-char|min-column-width-chars|min-column-width-p|min-column-width-pi|min-column-width-pix|min-column-width-pixe|min-column-width-pixel|min-column-width-pixels|min-height|min-height-c|min-height-ch|min-height-cha|min-height-char|min-height-chars|min-height-p|min-height-pi|min-height-pix|min-height-pixe|min-height-pixel|min-height-pixels|min-schema-marshal|min-schema-marshall|min-val|min-valu|min-value|min-width|min-width-c|min-width-ch|min-width-cha|min-width-char|min-width-chars|min-width-p|min-width-pi|min-width-pix|min-width-pixe|min-width-pixel|min-width-pixels|mod|modified|mouse|mouse-p|mouse-po|mouse-poi|mouse-poin|mouse-point|mouse-pointe|mouse-pointer|MOVABLE|move|move-after|move-after-|move-after-t|move-after-ta|move-after-tab|move-after-tab-|move-after-tab-i|move-after-tab-it|move-after-tab-ite|move-after-tab-item|move-befor|move-before|move-before-|move-before-t|move-before-ta|move-before-tab|move-before-tab-|move-before-tab-i|move-before-tab-it|move-before-tab-ite|move-before-tab-item|move-col|move-colu|move-colum|move-column|move-to-b|move-to-bo|move-to-bot|move-to-bott|move-to-botto|move-to-bottom|move-to-eof|move-to-t|move-to-to|move-to-top|MULTI-COMPILE|MULTIPLE|MULTITASKING-INTERVAL|MUST-UNDERSTAND)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-N": {
      "match": "(?i)(:)(NAME|NAMESPACE-PREFIX|NAMESPACE-URI|NEEDS-APPSERVER-PROMPT|NEEDS-PROMPT|NESTED|NEW|NEW-ROW|next-col|next-colu|next-colum|next-column|NEXT-ROWID|NEXT-SIBLING|next-tab-ite|next-tab-item|NO-CURRENT-VALUE|NO-EMPTY-SPACE|NO-FOCUS|NONAMESPACE-SCHEMA-LOCATION|no-schema-marshal|no-schema-marshall|no-val|no-vali|no-valid|no-valida|no-validat|no-validate|NODE-VALUE|NODE-VALUE-TO-LONGCHAR|NODE-VALUE-TO-MEMPTR|NORMALIZE|NUM-BUFFERS|num-but|num-butt|num-butto|num-button|num-buttons|NUM-CHILD-RELATIONS|NUM-CHILDREN|num-col|num-colu|num-colum|num-column|num-columns|NUM-DROPPED-FILES|NUM-ENTRIES|NUM-FIELDS|NUM-FORMATS|NUM-HEADER-ENTRIES|NUM-ITEMS|NUM-ITERATIONS|NUM-LINES|num-locked-col|num-locked-colu|num-locked-colum|num-locked-column|num-locked-columns|NUM-LOG-FILES|NUM-MESSAGES|NUM-PARAMETERS|NUM-REFERENCES|NUM-RELATIONS|num-repl|num-repla|num-replac|num-replace|num-replaced|NUM-RESULTS|num-selected|num-selected-rows|NUM-SELECTED-WIDGETS|NUM-SOURCE-BUFFERS|NUM-TABS|NUM-TO-RETAIN|NUM-TOP-BUFFERS|num-visible-col|num-visible-colu|num-visible-colum|num-visible-column|num-visible-columns|numeric|numeric-dec|numeric-deci|numeric-decim|numeric-decima|numeric-decimal|numeric-decimal-|numeric-decimal-p|numeric-decimal-po|numeric-decimal-poi|numeric-decimal-poin|numeric-decimal-point|numeric-f|numeric-fo|numeric-for|numeric-form|numeric-forma|numeric-format|numeric-sep|numeric-sepa|numeric-separ|numeric-separa|numeric-separat|numeric-separato|numeric-separator)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-O": {
      "match": "(?i)(:)(on-frame|on-frame-|on-frame-b|on-frame-bo|on-frame-bor|on-frame-bord|on-frame-borde|on-frame-border|OPTIONS|ORDINAL|ORIGIN-HANDLE|ORIGIN-ROWID|OVERLAY|OWNER|OWNER-DOCUMENT)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-P": {
      "match": "(?i)(:)(page-bot|page-bott|page-botto|page-bottom|PAGE-TOP|PARAMETER|PARENT|PARENT-BUFFER|PARENT-FIELDS-AFTER|PARENT-FIELDS-BEFORE|PARENT-ID-RELATION|parent-rel|parent-rela|parent-relat|parent-relati|parent-relatio|parent-relation|PARSE-STATUS|PASSWORD-FIELD|PATHNAME|pbe-hash-alg|pbe-hash-algo|pbe-hash-algor|pbe-hash-algori|pbe-hash-algorit|pbe-hash-algorith|pbe-hash-algorithm|PBE-KEY-ROUNDS|PERSISTENT|PERSISTENT-CACHE-DISABLED|PERSISTENT-PROCEDURE|pfc|pfco|pfcol|pfcolo|pfcolor|pixels-per-col|pixels-per-colu|pixels-per-colum|pixels-per-column|PIXELS-PER-ROW|popup-m|popup-me|popup-men|popup-menu|popup-o|popup-on|popup-onl|popup-only|POSITION|PREFER-DATASET|PREPARED|PREPARE-STRING|prev-col|prev-colu|prev-colum|prev-column|PREV-SIBLING|prev-tab-i|prev-tab-it|prev-tab-ite|prev-tab-item|PRIMARY|PRIMARY-PASSPHRASE|PRINTER-CONTROL-HANDLE|PRINTER-HDC|PRINTER-NAME|PRINTER-PORT|private-d|private-da|private-dat|private-data|PROCEDURE-NAME|PROCEDURE-TYPE|PROFILING|progress-s|progress-so|progress-sou|progress-sour|progress-sourc|progress-source|PROXY|PROXY-PASSWORD|PROXY-USERID|PUBLIC-ID|PUBLISHED-EVENTS)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-Q": {
      "match": "(?i)(:)(QUALIFIED-USER-ID|QUERY|QUERY-CLOSE|QUERY-OFF-END|QUERY-OPEN|QUERY-PREPARE|QUIT)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-R": {
      "match": "(?i)(:)(RADIO-BUTTONS|READ-FILE|READ-JSON|READ-ONLY|READ-XML|READ-XMLSCHEMA|READ|RECID|record-len|record-leng|record-lengt|record-length|RECURSIVE|REFRESH|REFRESHABLE|REFRESH-AUDIT-POLICY|REGISTER-DOMAIN|REJECT-CHANGES|REJECT-ROW-CHANGES|REJECTED|relation-fi|relation-fie|relation-fiel|relation-field|relation-fields|RELATIONS-ACTIVE|REMOTE|REMOTE-HOST|REMOTE-PORT|REMOVE-ATTRIBUTE|REMOVE-CHILD|remove-events-proc|remove-events-proce|remove-events-proced|remove-events-procedu|remove-events-procedur|remove-events-procedure|remove-super-proc|remove-super-proce|remove-super-proced|remove-super-procedu|remove-super-procedur|remove-super-procedure|REPLACE|REPLACE-CHILD|REPLACE-SELECTION-TEXT|REPOSITION|reposition-back|reposition-backw|reposition-backwa|reposition-backwar|reposition-backward|reposition-backwards|reposition-forw|reposition-forwa|reposition-forwar|reposition-forward|reposition-forwards|REPOSITION-TO-ROW|REPOSITION-TO-ROWID|REQUEST-INFO|RESET|resiza|resizab|resizabl|resizable|RESIZE|RESPONSE-INFO|RESTART-ROW|RESTART-ROWID|retain-s|retain-sh|retain-sha|retain-shap|retain-shape|return-ins|return-inse|return-inser|return-insert|return-inserte|return-inserted|RETURN-VALUE|RETURN-VALUE-DATA-TYPE|RETURN-VALUE-DLL-TYPE|ROLE|ROLES|ROUNDED|ROW|row-height|row-height-c|row-height-ch|row-height-cha|row-height-char|row-height-chars|row-height-p|row-height-pi|row-height-pix|row-height-pixe|row-height-pixel|row-height-pixels|ROW-STATE|ROWID|row-ma|row-mar|row-mark|row-marke|row-marker|row-markers|ROW-RESIZABLE)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-S": {
      "match": "(?i)(:)(SAVE|SAVE-FILE|SAVE-ROW-CHANGES|SAVE-WHERE-STRING|SAX-PARSE|SAX-PARSE-FIRST|SAX-PARSE-NEXT|sax-parser-error|SCHEMA-CHANGE|SCHEMA-LOCATION|SCHEMA-MARSHAL|SCHEMA-PATH|SCREEN-LINES|screen-val|screen-valu|screen-value|SCROLL-BARS|SCROLL-TO-CURRENT-ROW|scroll-to-i|scroll-to-it|scroll-to-ite|scroll-to-item|SCROLL-TO-SELECTED-ROW|SCROLLABLE|scrollbar-h|scrollbar-ho|scrollbar-hor|scrollbar-hori|scrollbar-horiz|scrollbar-horizo|scrollbar-horizon|scrollbar-horizont|scrollbar-horizonta|scrollbar-horizontal|scrollbar-v|scrollbar-ve|scrollbar-ver|scrollbar-vert|scrollbar-verti|scrollbar-vertic|scrollbar-vertica|scrollbar-verticalsss|SEAL-TIMESTAMP|SEARCH|SELECT-ALL|SELECT-FOCUSED-ROW|SELECT-NEXT-ROW|SELECT-PREV-ROW|SELECT-ROW|SELECTABLE|SELECTED|SELECTION-END|SELECTION-START|SELECTION-TEXT|SENSITIVE|SEPARATORS|SEPARATOR-FGCOLOR|SERIALIZE-HIDDEN|SERIALIZE-NAME|SERIALIZE-ROW|SERVER|server-connection-bo|server-connection-bou|server-connection-boun|server-connection-bound|server-connection-bound-re|server-connection-bound-req|server-connection-bound-requ|server-connection-bound-reque|server-connection-bound-reques|server-connection-bound-request|server-connection-co|server-connection-con|server-connection-cont|server-connection-conte|server-connection-contex|server-connection-context|server-connection-id|server-operating-mode|SESSION-END|SESSION-ID|SET-ACTOR|SET-APPL-CONTEXT|SET-ATTRIBUTE|SET-ATTRIBUTE-NODE|set-blue|set-blue-|set-blue-v|set-blue-va|set-blue-val|set-blue-valu|set-blue-value|SET-BREAK|SET-BUFFERS|SET-CALLBACK|SET-CALLBACK-PROCEDURE|SET-CLIENT|SET-COMMIT|SET-CONNECT-PROCEDURE|SET-DYNAMIC|set-green|set-green-|set-green-v|set-green-va|set-green-val|set-green-valu|set-green-value|SET-INPUT-SOURCE|SET-MUST-UNDERSTAND|SET-NODE|set-numeric-form|set-numeric-forma|set-numeric-format|SET-OUTPUT-DESTINATION|SET-PARAMETER|SET-READ-RESPONSE-PROCEDURE|set-red|set-red-|set-red-v|set-red-va|set-red-val|set-red-valu|set-red-value|SET-REPOSITIONED-ROW|SET-RGB-VALUE|SET-ROLE|SET-ROLLBACK|SET-SAFE-USER|SET-SELECTION|SET-SERIALIZED|SET-SOCKET-OPTION|SET-SORT-ARROW|set-wait|set-wait-|set-wait-s|set-wait-st|set-wait-sta|set-wait-stat|set-wait-state|show-in-task|show-in-taskb|show-in-taskba|show-in-taskbar|side-label-han|side-label-hand|side-label-handl|side-label-handle|SIDE-LABELS|signature|signature-value|SINGLE-RUN|SINGLETON|skip-deleted-rec|skip-deleted-reco|skip-deleted-recor|skip-deleted-record|SMALL-ICON|SMALL-TITLE|soap-fault-actor|soap-fault-code|soap-fault-detail|soap-fault-misunderstood-header|soap-fault-node|soap-fault-role|soap-fault-string|soap-fault-subcode|SOAP-VERSION|SORT|SORT-ASCENDING|SORT-NUMBER|SSL-SERVER-NAME|STANDALONE|START-DOCUMENT|START-ELEMENT|STARTUP-PARAMETERS|STATE-DETAIL|STATISTICS|STATUS-AREA|STATUS-AREA-FONT|STOP|STOP-OBJECT|STOP-PARSING|stoppe|stopped|STREAM|STRETCH-TO-FIT|STRICT|STRICT-ENTITY-RESOLUTION|STRING-VALUE|SUBTYPE|super-proc|super-proce|super-proced|super-procedu|super-procedur|super-procedure|super-procedures|SUPPRESS-NAMESPACE-PROCESSING|suppress-w|suppress-wa|suppress-war|suppress-warn|suppress-warni|suppress-warnin|suppress-warning|suppress-warnings|suppress-warnings-list|SYMMETRIC-ENCRYPTION-AAD|SYMMETRIC-ENCRYPTION-ALGORITHM|SYMMETRIC-ENCRYPTION-IV|SYMMETRIC-ENCRYPTION-KEY|SYMMETRIC-SUPPORT|SYNCHRONIZE|system-alert|system-alert-|system-alert-b|system-alert-bo|system-alert-box|system-alert-boxe|system-alert-boxes|SYSTEM-ID)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-T": {
      "match": "(?i)(:)(TAB-POSITION|TAB-STOP|TABLE|TABLE-CRC-LIST|TABLE-HANDLE|TABLE-LIST|table-num|table-numb|table-numbe|table-number|temp-dir|temp-dire|temp-direc|temp-direct|temp-directo|temp-director|temp-directory|temp-table-prepar|temp-table-prepare|TENANT-ID|TENANT-NAME|TEXT-SELECTED|THREAD-SAFE|THREE-D|TIC-MARKS|TIME-SOURCE|TIMEZONE|TITLE|title-bgc|title-bgco|title-bgcol|title-bgcolo|title-bgcolor|title-dc|title-dco|title-dcol|title-dcolo|title-dcolor|title-fgc|title-fgco|title-fgcol|title-fgcolo|title-fgcolor|title-fo|title-fon|title-font|TOGGLE-BOX|TOOLTIP|TOOLTIPS|TOP-NAV-QUERY|TOP-ONLY|TRACE-FILTER|TRACING|TRACKING-CHANGES|TRANSACTION|TRANSPARENT|trans-init-proc|trans-init-proce|trans-init-proced|trans-init-procedu|trans-init-procedur|trans-init-procedure|TYPE)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-U": {
      "match": "(?i)(:)(UNDO|UNDO-THROW-SCOPE|UNIQUE-ID|UNIQUE-MATCH|UPDATE-ATTRIBUTE|URL|URL-DECODE|URL-ENCODE|URL-PASSWORD|URL-USERID|USER-DATA |USER-ID)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-V": {
      "match": "(?i)(:)(V6DISPLAY|VALIDATE|VALIDATE-DOMAIN-ACCESS-CODE|validate-expressio|validate-expression|VALIDATE-MESSAGE|VALIDATE-SEAL|VALIDATE-XML|VALIDATION-ENABLED|VALUE|VERSION|VIEW-AS|VIEW-FIRST-COLUMN-ON-REOPEN|virtual-height|virtual-height-c|virtual-height-ch|virtual-height-cha|virtual-height-char|virtual-height-chars|virtual-height-p|virtual-height-pi|virtual-height-pix|virtual-height-pixe|virtual-height-pixel|virtual-height-pixels|virtual-width|virtual-width-c|virtual-width-ch|virtual-width-cha|virtual-width-char|virtual-width-chars|virtual-width-p|virtual-width-pi|virtual-width-pix|virtual-width-pixe|virtual-width-pixel|virtual-width-pixels|VISIBLE)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-W": {
      "match": "(?i)(:)(WARNING|WC-ADMIN-APP|WHERE-STRING|WIDGET-ENTER|WIDGET-ID|widget-l|widget-le|widget-lea|widget-leav|widget-leave|width|width-c|width-ch|width-cha|width-char|width-chars|width-p|width-pi|width-pix|width-pixe|width-pixel|width-pixels|WINDOW|window-sta|window-stat|window-state|window-sys|window-syst|window-syste|window-system|WORD-WRAP|work-area-height-p|work-area-height-pi|work-area-height-pix|work-area-height-pixe|work-area-height-pixel|work-area-height-pixels|work-area-width-p|work-area-width-pi|work-area-width-pix|work-area-width-pixe|work-area-width-pixel|work-area-width-pixels|work-area-x|work-area-y|WRITE-CDATA|WRITE-CHARACTERS|WRITE-COMMENT|WRITE-DATA|WRITE-DATA-ELEMENT|WRITE-EMPTY-ELEMENT|WRITE-ENTITY-REF|WRITE-EXTERNAL-DTD|WRITE-FRAGMENT|WRITE-JSON|WRITE-MESSAGE|WRITE-PROCESSING-INSTRUCTION|WRITE-STATUS|WRITE-XML|WRITE-XMLSCHEMA|WRITE)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-X": {
      "match": "(?i)(:)(X|X-DOCUMENT|XCODE-SESSION-KEY|XML-DATA-TYPE|XML-ENTITY-EXPANSION-LIMIT|XML-NODE-NAME|XML-NODE-TYPE|XML-SCHEMA-PATH|XML-STRICT-ENTITY-RESOLUTION|XML-SUPPRESS-NAMESPACE-PROCESSING)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "handle-attributes-Y": {
      "match": "(?i)(:)(Y|YEAR-OFFSET)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "abl-functions": {
      "patterns": [
        {
          "include": "#abl-functions-A"
        },
        {
          "include": "#abl-functions-B"
        },
        {
          "include": "#abl-functions-C"
        },
        {
          "include": "#abl-functions-D"
        },
        {
          "include": "#abl-functions-E"
        },
        {
          "include": "#abl-functions-F"
        },
        {
          "include": "#abl-functions-G"
        },
        {
          "include": "#abl-functions-H"
        },
        {
          "include": "#abl-functions-I"
        },
        {
          "include": "#abl-functions-K"
        },
        {
          "include": "#abl-functions-L"
        },
        {
          "include": "#abl-functions-M"
        },
        {
          "include": "#abl-functions-N"
        },
        {
          "include": "#abl-functions-O"
        },
        {
          "include": "#abl-functions-P"
        },
        {
          "include": "#abl-functions-Q"
        },
        {
          "include": "#abl-functions-R"
        },
        {
          "include": "#abl-functions-S"
        },
        {
          "include": "#abl-functions-T"
        },
        {
          "include": "#abl-functions-U"
        },
        {
          "include": "#abl-functions-V"
        },
        {
          "include": "#abl-functions-W"
        },
        {
          "include": "#abl-functions-Y"
        }
      ]
    },
    "abl-functions-A": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(ABSOLUTE|ACCUM|ADD-INTERVAL|ALIAS|AMBIGUOUS|ASC|AUDIT-ENABLED|AVAILABLE)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-B": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(BASE64-DECODE|BASE64-ENCODE|BOX|BUFFER-GROUP-ID|BUFFER-GROUP-NAME|BUFFER-PARTITION-ID|BUFFER-TENANT-ID|BUFFER-TENANT-NAME)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-C": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(CAN-DO|CAN-FIND|CAN-QUERY|CAN-SET|CAPS|CAST|CHR|CODEPAGE-CONVERT|COMPARE|CONNECTED|COUNT-OF|CURRENT-CHANGED|CURRENT-LANGUAGE|CURRENT-RESULT-ROW|CURRENT-VALUE)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-D": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(DATASERVERS|DATA-SOURCE-MODIFIED|DATE|DATETIME|DATETIME-TZ|DAY|DBCODEPAGE|DBCOLLATION|DBNAME|DBPARAM|DB-REMOTE-HOST|DBRESTRICTIONS|DBTASKID|DBTYPE|DBVERSION|DECIMAL|DECRYPT|DEFINED|DYNAMIC-CAST|DYNAMIC-CURRENT-VALUE|DYNAMIC-ENUM|DYNAMIC-FUNCTION|DYNAMIC-INVOKE|DYNAMIC-NEXT-VALUE|DYNAMIC-PROPERTY)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-E": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(ENCODE|ENCRYPT|ENTERED|ENTRY|ERROR|ETIME|EXP|EXTENT)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-F": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(FILL|FIRST|FIRST-OF|FRAME-COL|FRAME-DB|FRAME-DOWN|FRAME-FIELD|FRAME-FILE|FRAME-INDEX|FRAME-LINE|FRAME-NAME|FRAME-ROW|FRAME-VALUE)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-G": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(GATEWAYS|GENERATE-PBE-KEY|GENERATE-PBE-SALT|GENERATE-RANDOM-KEY|GENERATE-UUID|GET-BITS|GET-BYTE|GET-BYTE-ORDER|GET-BYTES|GET-CLASS|GET-CODEPAGE|GET-CODEPAGES|GET-COLLATION|GET-COLLATIONS|GET-DB-CLIENT|GET-DOUBLE|GET-EFFECTIVE-TENANT-ID|GET-EFFECTIVE-TENANT-NAME|GET-FLOAT|GET-INT64|GET-LONG|GET-POINTER-VALUE|GET-SHORT|GET-SIZE|GET-STRING|GET-UNSIGNED-LONG|GET-UNSIGNED-SHORT|GO-PENDING|GUID)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-H": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(HANDLE|HASH-CODE|HEX-DECODE|HEX-ENCODE)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-I": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(INDEX|INPUT|INT64|INTEGER|INTERVAL|IS-ATTR-SPACE|IS-CODEPAGE-FIXED|IS-COLUMN-CODEPAGE|IS-DB-MULTI-TENANT|IS-LEAD-BYTE|ISO-DATE)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-K": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(KBLABEL|KEYCODE|KEYFUNCTION|KEYLABEL|KEYWORD|KEYWORD-ALL)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-L": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(LAST|LASTKEY|LAST-OF|LC|LDBNAME|LEFT-TRIM|LENGTH|LIBRARY|LINE-COUNTER|LIST-EVENTS|LIST-QUERY-ATTRS|LIST-SET-ATTRS|LIST-WIDGETS|LOCKED|LOG|LOGICAL|LOOKUP|lower)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-M": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(MAXIMUM|MD5-DIGEST|MEMBER|MESSAGE-DIGEST|MESSAGE-LINES|MINIMUM|MONTH|MTIME)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-N": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(NEXT-VALUE|NORMALIZE|NOT ENTERED|NOW|NUM-ALIASES|NUM-DBS|NUM-ENTRIES|NUM-RESULTS)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-O": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(OPSYS|OS-DRIVES|OS-ERROR|OS-GETENV)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-P": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(PAGE-NUMBER|PAGE-SIZE|PDBNAME|proc-ha|proc-han|proc-hand|proc-handl|proc-handle|PROGRAM-NAME|PROGRESS|PROMSGS|PROPATH|provers|proversi|proversio|proversion)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-Q": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(QUERY-OFF-END|QUOTER)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-R": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(R-INDEX|RANDOM|RAW|RAW-TRANSFER|RECID|RECORD-LENGTH|REJECTED|REPLACE|RETRY|return|RETURN-VALUE|rgb-v|rgb-va|rgb-val|rgb-valu|rgb-value|RIGHT-TRIM|ROUND|ROW-STATE|ROWID)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-S": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(SCREEN-LINES|SDBNAME|SEAL|SEARCH|SEEK|set-size|SET-DB-CLIENT|SET-EFFECTIVE-TENANT|set-attribute|set-attribute-node|set-rgb|set-byte-order|set-rgb-|set-rgb-v|set-rgb-va|set-rgb-val|set-rgb-valu|set-rgb-value|setuser|setuseri|setuserid|SHA1-DIGEST|SQRT|SSL-SERVER-NAME|string|subst|substi|substit|substitu|substitut|substitute|substr|substri|substrin|substring|SUPER)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-T": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(TENANT-ID|TENANT-NAME|TENANT-NAME-TO-ID|TERMINAL|THIS-OBJECT|TIME|TIMEZONE|TODAY|TO-ROWID|TRANSACTION|TRIM|TRUNCATE|TYPE-OF)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-U": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(UNBOX|USERID)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-V": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(VALID-EVENT|VALID-HANDLE|VALID-OBJECT|VALUE)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-W": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(WEEKDAY|WIDGET-HANDLE)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "abl-functions-Y": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(YEAR)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#function-arguments"
        }
      ]
    },
    "define-interface": {
      "name": "meta.define.interface.abl",
      "begin": "(?i)\\b(interface)\\s+([\\w\\#\\$\\%]+[\\w\\#\\$\\%\\.]*(\\s*<\\s*[\\w\\#\\$\\%\\.]+\\s*\\>)?)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "entity.name.type.abl"
        }
      },
      "end": "\\s*(:)",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.abl"
        }
      },
      "patterns": [
        {
          "match": "(?i)\\s*(inherits|implements)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "include": "#type-names"
        },
        {
          "include": "#type-name-comma"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "inherits-implements-type": {
      "name": "meta.define-type.implements.abl",
      "begin": "(?i)\\s*(implements|inherits)\\s*(([\\w\\#\\$\\%]+|progress)(\\.[\\w\\#\\$\\%]+)*(?<!\\.))\\s*",
      "end": "(?i)\\s*(serializable|abstract|final|use-widget-pool|inherits|implements+?)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "entity.name.type.abl"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "patterns": [
        {
          "include": "#type-name-comma"
        }
      ]
    },
    "define-enum-type": {
      "patterns": [
        {
          "name": "meta.define.enum.abl",
          "match": "(?i)\\b(enum)\\s+([\\w\\#\\$\\%\\.]+)\\s*(flags)?\\s*(:)",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            },
            "2": {
              "name": "entity.name.type.abl"
            },
            "3": {
              "name": "keyword.other.abl"
            },
            "4": {
              "name": "punctuation.terminator.abl"
            }
          }
        }
      ]
    },
    "define-enum-member": {
      "begin": "(?i)\\b(enum)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(?=\\.)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#numeric"
        },
        {
          "match": "\\b([\\w\\#\\$\\%]+)\\b",
          "captures": {
            "1": {
              "name": "entity.name.function.abl"
            }
          }
        }
      ]
    },
    "attribute-access": {
      "begin": ":",
      "end": "(?=:)|(?=\\s*)",
      "comment": "",
      "patterns": []
    },
    "parens": {
      "match": "\\(|\\)",
      "name": "meta.brace.round.js"
    },
    "new-class": {
      "begin": "(?i)\\b(new)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(?=\\()",
      "patterns": [
        {
          "include": "#type-name-generic-progress"
        },
        {
          "include": "#type-name-generic"
        },
        {
          "include": "#type-name-comma-progress"
        },
        {
          "include": "#type-name-progress"
        },
        {
          "include": "#type-name-comma"
        },
        {
          "include": "#type-name"
        },
        {
          "include": "#string"
        }
      ]
    },
    "get-class": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(get-class)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        },
        "2": {
          "name": "meta.brace.round.js"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#type-names"
        }
      ]
    },
    "find-record": {
      "match": "(?i)\\s*(find)\\s+(first|last|next|prev|current)?\\s*([\\w\\-#$%]+)\\s*",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        },
        "3": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "field-name": {
      "comment": "Just a field name",
      "patterns": [
        {
          "match": "\\s*([\\w\\-#$%]+(\\.[\\w\\-#$%]+)?\\s*(\\[\\d+\\]))\\s*",
          "captures": {
            "1": {
              "name": "storage.data.table.abl"
            }
          }
        },
        {
          "match": "\\s*([\\w\\-#$%]+(\\.[\\w\\-#$%]+)?)\\s*",
          "captures": {
            "1": {
              "name": "storage.data.table.abl"
            }
          }
        }
      ]
    },
    "db-dot-table-dot-field": {
      "match": "(?i)(?<=^|\\s|\\(|,)(([\\w\\-#$%]+\\.)?([\\w\\-#$%]+\\.)([\\w\\-#$%]+)(\\[\\d+\\])?)",
      "comment": "Looks for format of 'table.field', with an optional preceding 'db.'. This pattern may conflict with type names",
      "captures": {
        "1": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "db-dot-table": {
      "match": "(?i)\\s*([\\w\\-#$%]+(\\.[\\w\\-#$%]+)?)\\s*",
      "comment": "Looks for format of 'table', with an optional preceding 'db.'. This pattern may conflict with type names",
      "captures": {
        "1": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "break-group": {
      "match": "(?i)\\s*(first-of|first|last-of|last)\\s*(\\()\\s*([\\w\\-#$%]+\\.[\\w\\-#$%]+(\\.[\\w\\-#$%]+)?)\\s*(\\))\\s*",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "meta.brace.round.js"
        },
        "3": {
          "name": "storage.data.table.abl"
        },
        "4": {
          "name": "meta.brace.round.js"
        }
      }
    },
    "of-phrase": {
      "match": "(?i)\\s*([\\w\\-#$%]+(\\.[\\w\\-#$%]+)?)\\s+(of)\\s+([\\w\\-#$%]+(\\.[\\w\\-#$%]+)?)\\s*",
      "captures": {
        "1": {
          "name": "storage.data.table.abl"
        },
        "3": {
          "name": "keyword.other.abl"
        },
        "4": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "for-join": {
      "comment": "Captures something like ', salesrep where' or 'salesrep where', when the latter is at the beginning of a line. 'OF' phrases handled by of-phrase",
      "match": "(?i)(?<=,|^)\\s*([\\w\\-#$%]+(\\.[\\w\\-#$%]+)?)\\s+(?=where|no-lock|share-lock|exclusive-lock|tenant-where|use-index|table-scan|using|no-prefetch|left|outer-join|break|by|transaction)",
      "captures": {
        "1": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "for-each-join": {
      "begin": "(?i)(?<=,)\\s*(each|first|last)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "3": {
          "name": "storage.data.table.abl"
        }
      },
      "end": "(?i)\\s*(?=where|no-lock|share-lock|exclusive-lock|tenant-where|use-index|table-scan|using|no-prefetch|left|outer-join|break|by|transaction|,|:)\\s*",
      "patterns": [
        {
          "include": "#fields-except-list"
        },
        {
          "include": "#of-phrase"
        },
        {
          "comment": "Intended to catch joins like ', table of table2', since the first table name is matched by the begin",
          "match": "(?i)\\s*(of)\\s+([\\w\\-#$%]+(\\.[\\w\\-#$%]+)?)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            },
            "2": {
              "name": "storage.data.table.abl"
            }
          }
        },
        {
          "match": "\\s*([\\w\\-#$%]+(\\.[\\w\\-#$%]+)?)\\s*",
          "comment": "Matches the table name in the case of eg ',each table' ",
          "captures": {
            "1": {
              "name": "storage.data.table.abl"
            }
          }
        }
      ]
    },
    "for-each-table": {
      "begin": "(?i)(?<=\\s+|^)(for|preselect)[\\s+|$]",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(?i)\\s*(?=where|no-lock|share-lock|exclusive-lock|tenant-where|use-index|table-scan|using|no-prefetch|left|outer-join|break|by|transaction|,|:|on)\\s*",
      "patterns": [
        {
          "match": "(?i)\\s*(each|first|last|of)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "include": "#fields-except-list"
        },
        {
          "include": "#of-phrase"
        },
        {
          "include": "#field-name"
        },
        {
          "include": "#db-dot-table"
        },
        {
          "include": "#db-dot-table-dot-field"
        }
      ]
    },
    "fields-except-list": {
      "begin": "(?i)\\s*(fields|except)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "meta.brace.round.js"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#db-dot-table-dot-field"
        },
        {
          "include": "#field-name"
        }
      ]
    },
    "copy-lob": {
      "comment": "Has its own rule because of the 'FOR length' option, which is parsed as a 'FOR EACH' type statement",
      "begin": "(?i)\\b(copy-lob)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(?=\\.)",
      "patterns": [
        {
          "include": "#code-block"
        }
      ]
    },
    "type-argument-function": {
      "name": "meta.function-call.abl",
      "begin": "(?i)\\s*(cast|type-of)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.abl"
        },
        "2": {
          "name": "meta.brace.round.js"
        }
      },
      "end": "(?<=\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "comment": "This can only be table.field, never db.table.field, since only TT's can hold objects",
          "match": "\\s*(([\\w\\-#$%]+)\\.([\\w\\-#$%]+))\\s*(,)",
          "captures": {
            "1": {
              "name": "storage.data.table.abl"
            },
            "4": {
              "name": "punctuation.separator.comma.abl"
            }
          }
        },
        {
          "match": "\\s*([a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\&]*)\\s*((,)|(?=:))",
          "captures": {
            "1": {
              "name": "variable.other.abl"
            },
            "3": {
              "name": "punctuation.separator.comma.abl"
            }
          }
        },
        {
          "match": "\\s*:([\\w-]+)\\s*(,)",
          "captures": {
            "1": {
              "name": "entity.name.function.abl"
            },
            "2": {
              "name": "punctuation.separator.comma.abl"
            }
          }
        },
        {
          "include": "#type-argument-function"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#property-call"
        },
        {
          "include": "#static-object-property-call"
        },
        {
          "include": "#doublequotedstring"
        },
        {
          "include": "#singlequotedstring"
        },
        {
          "include": "#translation-attribute"
        },
        {
          "include": "#type-name-generic-progress"
        },
        {
          "include": "#type-name-generic"
        },
        {
          "include": "#type-name-comma-progress"
        },
        {
          "include": "#type-name-progress"
        },
        {
          "include": "#type-name-comma"
        },
        {
          "include": "#type-name"
        },
        {
          "include": "#parens"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "code-block": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#break-group"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#string"
        },
        {
          "include": "#language-functions"
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#include-file"
        },
        {
          "include": "#run-statement"
        },
        {
          "include": "#define"
        },
        {
          "include": "#block-statement"
        },
        {
          "include": "#end-block"
        },
        {
          "include": "#property-call"
        },
        {
          "include": "#type-reference"
        },
        {
          "include": "#abl-functions"
        },
        {
          "include": "#abl-system-handles"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#variable-name"
        },
        {
          "include": "#static-object-property-call"
        },
        {
          "include": "#punctuation-period"
        },
        {
          "include": "#punctuation-colon"
        }
      ]
    },
    "property-accessor": {
      "patterns": [
        {
          "include": "#property-get-set-super"
        },
        {
          "include": "#property-get-set-empty"
        },
        {
          "include": "#property-get-set-block"
        }
      ]
    },
    "property-get-set-super": {
      "match": "\\b(get|set)\\s+(super)\\s*(?=\\.)",
      "comment": "This is a call to the parent class' property getter or setter",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        }
      }
    },
    "property-get-set-empty": {
      "comment": "This rule is needed since for 'plain' gets and sets, there's no END",
      "match": "\\b(get|set)\\s*(?=\\.)",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        }
      }
    },
    "property-get-set-block": {
      "begin": "(?i)\\s*(?<!\\:)\\s*(get|set)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(?i)\\s*(end)\\s*(get|set)?\\s*(?=\\.)\\s*",
      "comment": "The end capture does a lookahead on . so that the 'define' capture can end ",
      "endCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        }
      },
      "patterns": [
        {
          "include": "#function-parameter-definition"
        },
        {
          "include": "#code-block"
        },
        {
          "include": "#punctuation-colon"
        }
      ]
    },
    "parameter-as": {
      "begin": "(?i)\\s*([\\w\\-]+)\\s+(as)\\s+",
      "beginCaptures": {
        "1": {
          "name": "variable.parameter.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(?=\\s|\\)|\\.)",
      "patterns": [
        {
          "match": "(?i)\\s*(class)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "include": "#primitive-type"
        },
        {
          "include": "#dll-type"
        },
        {
          "include": "#type-name-progress"
        },
        {
          "include": "#type-name-generic"
        },
        {
          "include": "#type-name"
        },
        {
          "include": "#parens"
        },
        {
          "include": "#string"
        },
        {
          "include": "#punctuation-period"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "define-variable-name": {
      "match": "(?i)(var|vari|varia|variab|variabl|variable)\\s+([a-z][a-z0-9#$-_%&])+\\s*",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "variable.other.abl"
        }
      }
    },
    "variable-as": {
      "match": "(?i)\\s*([\\w\\-]+)\\s+(as)\\s*",
      "captures": {
        "1": {
          "name": "variable.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        }
      }
    },
    "property-as": {
      "match": "(?i)\\s*([\\w\\-]+)\\s+(as)\\s*",
      "captures": {
        "1": {
          "name": "entity.name.function.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        }
      }
    },
    "field-as-object": {
      "comment": "This is to capture 'FIELD x AS Object'. As of OE 12.7 only Progress.Lang.Object is allowed as a type name. If/when this changes, this regex becomes trickier",
      "match": "(?i)\\s*(progress\\.lang\\.object|object)\\s*",
      "captures": {
        "1": {
          "name": "entity.name.type.abl"
        }
      }
    },
    "annotation": {
      "patterns": [
        {
          "include": "#annotation-simple"
        },
        {
          "include": "#annotation-attributes"
        }
      ]
    },
    "annotation-simple": {
      "name": "meta.declaration.annotation.abl",
      "match": "(?i)(^|\\s*)(\\@[a-z][a-z0-9#\\$-_%&]*)\\s*(?=\\.)",
      "captures": {
        "2": {
          "name": "entity.name.tag.abl"
        }
      }
    },
    "annotation-attributes": {
      "name": "meta.declaration.annotation.abl",
      "begin": "(?i)(^|\\s+)(\\@[a-z][a-z0-9#\\$-_%&]*)\\s*(?=\\()",
      "beginCaptures": {
        "2": {
          "name": "entity.name.tag.abl"
        }
      },
      "end": "(?=\\.)",
      "patterns": [
        {
          "include": "#parens"
        },
        {
          "match": "(?i)\\s*([a-z][a-z0-9#\\$-_%&]+)(?=[\\=\\s$])",
          "captures": {
            "1": {
              "name": "entity.other.attribute-name.abl"
            }
          }
        },
        {
          "include": "#string"
        },
        {
          "include": "#operator-no-space"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "define": {
      "name": "meta.define.abl",
      "begin": "(?i)\\s*(define|defin|defi|def)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(\\.)",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.abl"
        }
      },
      "patterns": [
        {
          "match": "(?i)\\s*(new|global|glob|shared)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "include": "#serializable"
        },
        {
          "include": "#access-modifier"
        },
        {
          "include": "#define-enum-member"
        },
        {
          "include": "#define-variable"
        },
        {
          "include": "#define-dataset"
        },
        {
          "include": "#define-event"
        },
        {
          "include": "#define-property"
        },
        {
          "include": "#property-accessor"
        },
        {
          "include": "#array-literal"
        },
        {
          "include": "#define-field"
        },
        {
          "include": "#parameter-as"
        },
        {
          "include": "#define-stream"
        },
        {
          "include": "#define-buffer"
        },
        {
          "include": "#define-frame"
        },
        {
          "include": "#for-table"
        },
        {
          "include": "#buffer-for-table"
        },
        {
          "include": "#define-table"
        },
        {
          "include": "#define-index"
        },
        {
          "include": "#define-like"
        },
        {
          "include": "#field-as-object"
        },
        {
          "include": "#preprocessors"
        },
        {
          "include": "#extent"
        },
        {
          "include": "#decimals"
        },
        {
          "include": "#format-constant"
        },
        {
          "include": "#timestamp-constant"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#string"
        },
        {
          "include": "#primitive-type"
        },
        {
          "include": "#dll-type"
        },
        {
          "include": "#type-name-progress"
        },
        {
          "include": "#abl-system-handles"
        },
        {
          "include": "#property-call"
        },
        {
          "include": "#handle-attributes"
        },
        {
          "include": "#abl-functions"
        },
        {
          "include": "#function-parameter-definition"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#label-variable"
        },
        {
          "include": "#type-name-generic"
        },
        {
          "include": "#type-name"
        }
      ]
    },
    "define-field": {
      "match": "(?i)\\s*(field)\\s+([\\w\\-#$%]+)\\s*",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "define-property": {
      "begin": "(?i)\\b(property|prop)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "comment": "This match just gets the definition of the property; the getter and setter are handled separately",
      "end": "(?i)\\s*(?=get|set)",
      "patterns": [
        {
          "include": "#property-as"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#primitive-type"
        },
        {
          "include": "#extent"
        },
        {
          "include": "#decimals"
        },
        {
          "include": "#array-literal"
        },
        {
          "include": "#timestamp-constant"
        },
        {
          "include": "#numeric"
        },
        {
          "comment": "needs to be before the #keywords include",
          "include": "#type-name-generic-progress"
        },
        {
          "comment": "needs to be before the #keywords include",
          "include": "#type-name-progress"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#string"
        },
        {
          "include": "#type-name-generic"
        },
        {
          "include": "#type-name"
        }
      ]
    },
    "buffer-name": {
      "match": "(?i)\\b(buffer)\\s+([\\w\\-#$%]+(\\.[\\w\\-#$%]+)?)",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "temp-table-name": {
      "match": "(?i)\\b(temp-table)\\s+([\\w\\-#$%]+)",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "create-buffer": {
      "comment": "https://docs.progress.com/bundle/abl-reference/page/CREATE-BUFFER-statement.html",
      "begin": "(?i)(create)\\s+(buffer)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(?i)(\\b(buffer-name|in)\\b)|(?=\\.)",
      "endCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "patterns": [
        {
          "match": "(?i)\\s*(for|table)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "include": "#define-table"
        },
        {
          "include": "#buffer-name"
        },
        {
          "include": "#temp-table-name"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#string"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#handle-attributes"
        },
        {
          "include": "#variable-name"
        }
      ]
    },
    "define-index": {
      "begin": "(?i)\\s*(index)\\s+([a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\&]*)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "storage.data.table.abl"
        }
      },
      "end": "(?i)(?=\\bindex\\b|\\.)",
      "patterns": [
        {
          "match": "(?i)\\b(AS|IS|UNIQUE|PRIMARY|WORD-INDEX|ASCENDING|DESCENDING)\\b",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "match": "\\b([a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\&]*)\\b",
          "captures": {
            "1": {
              "name": "storage.data.table.abl"
            }
          }
        }
      ]
    },
    "define-dataset": {
      "match": "(?i)\\b(dataset)\\s+([a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\&]*)\\b",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "storage.data.dataset.abl"
        }
      }
    },
    "define-event": {
      "match": "(?i)\\b(event)\\s+([a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\&]*)\\b",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "define-buffer": {
      "begin": "(?i)\\s*(buffer)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(?=\\.)",
      "patterns": [
        {
          "include": "#for-table"
        },
        {
          "include": "#buffer-for-table"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        }
      ]
    },
    "define-frame": {
      "match": "(?i)\\s*(frame)\\s*([a-z][a-z0-9#$\\-_%&]*)",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "variable.other.abl"
        }
      }
    },
    "define-variable": {
      "comment": "This rule captures just the variable name and the data type. Based on https://docs.progress.com/bundle/abl-reference/page/DEFINE-VARIABLE-statement.html",
      "begin": "(?i)\\s*(variable|variabl|variab|varia|vari|var)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(?i)(?=\\.)|\\b(?=bgcolor|column-label|contet-help-id|dcolor|decimals|drop-target|extent|font|fgcolor|format|initial|label|mouse-pointer|no-undo|not|case-sensitive|pfcolor|view-as|triggers)\\b",
      "endCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "patterns": [
        {
          "match": "(?i)\\b(class)\\b",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "include": "#variable-as"
        },
        {
          "include": "#primitive-type"
        },
        {
          "comment": "needs to be before the #keywords include",
          "include": "#type-names"
        },
        {
          "comment": "needs to be before the #keywords include",
          "include": "#type-name-generic-progress"
        },
        {
          "comment": "needs to be before the #keywords include",
          "include": "#type-name-progress"
        },
        {
          "include": "#string"
        },
        {
          "include": "#type-name-generic"
        },
        {
          "include": "#type-name"
        }
      ]
    },
    "label-variable": {
      "match": "(?i)\\s*(\\w+)\\s+(label)\\s*",
      "captures": {
        "1": {
          "name": "variable.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        }
      }
    },
    "format-constant": {
      "comment": "DATE/TIME/TZ fields can have an unquoted format if it's something like 99/99/9999",
      "match": "(?i)\\b(format)\\s+(9+\\/9+\\/9+)\\b",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "constant.language.source.abl"
        }
      }
    },
    "define-table": {
      "match": "(?i)\\b(temp-table|like|before-table)\\s*([\\w\\-#$%]+)\\s*",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "buffer-for-table": {
      "match": "(?i)\\s*(?!do|repeat|for)([\\w\\-#$%]+)\\s+(for)\\s+((temp-table)\\s+)?([\\w\\-#$%]+)\\s*",
      "captures": {
        "1": {
          "name": "storage.data.table.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        },
        "4": {
          "name": "keyword.other.abl"
        },
        "5": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "double-colon-field-name": {
      "match": "\\s*::([\\w\\-#$%]+)\\s*",
      "captures": {
        "1": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "for-table": {
      "match": "(?i)\\s*(for)\\s+((temp-table)\\s+)?([\\w\\-#$%]+)\\s*",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "3": {
          "name": "keyword.other.abl"
        },
        "4": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "access-modifier": {
      "match": "(?i)\\s*(package-private|private|package-protected|protected|public|static|override|abstract|final)\\s*",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        }
      }
    },
    "serializable": {
      "match": "(?i)\\b(non-serializable|serializable)\\b",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        }
      }
    },
    "define-stream": {
      "name": "meta.define.stream.abl",
      "match": "(?i)\\s*(stream)\\s*([\\w\\-]+)",
      "comment": "https://docs.progress.com/bundle/openedge-abl-reference-122/page/DEFINE-STREAM-statement.html",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "patterns": [
            {
              "include": "#variable-name"
            }
          ]
        }
      }
    },
    "define-like": {
      "match": "(?i)\\s*(like|like-sequential)\\s+([\\w\\-#$%]+)\\s*",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "block-label": {
      "match": "(?i)^\\s*(([a-z][a-z0-9\\-\\_\\$]*):)\\s+",
      "comment": "A colon followed by a space is only legal is for block labels. block labels must be at the beginning of a line",
      "captures": {
        "2": {
          "name": "meta.block.label.abl"
        }
      }
    },
    "end-block": {
      "comment": "Certain blocks have the option of END <block name>",
      "match": "(?i)\\s*(end)\\s+(CASE|CATCH|CLASS|CONSTRUCTOR|DESTRUCTOR|ENUM|FINALLY|FUNCTION|GET|INTERFACE|METHOD|PROCEDURE|SET|TRIGGERS)\\s*",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        }
      }
    },
    "block-statement": {
      "begin": "(?i)(?<!end)\\s*(do|repeat|finally)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "comment": "The end condition is look forward AND backward for the colon, since contained conditions may terminate on a line-ending, which may contain the colon",
      "end": "\\s*(?=:)|(?<=:)|(?=\\.)|(?<=\\.)\\s*",
      "name": "meta.block.abl",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#for-record"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#from-to-by"
        },
        {
          "include": "#while-expression"
        },
        {
          "match": "(?i)\\b(transaction|stop-after)\\b",
          "name": "keyword.other.abl"
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#type-member-call"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#punctuation-colon"
        },
        {
          "include": "#branch-options"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#preprocessors"
        }
      ]
    },
    "from-to-by": {
      "begin": "\\s*([\\w\\$\\-\\_\\%\\&]+)\\s+(=)\\s*",
      "beginCaptures": {
        "1": {
          "name": "variable.other.abl"
        },
        "2": {
          "name": "keyword.operator.source.abl"
        }
      },
      "end": "(?i)(?=transaction|on|\\:|with|while)",
      "patterns": [
        {
          "match": "(?i)\\s+(to|by)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#branch-options"
        }
      ]
    },
    "event-un-subscribe": {
      "begin": "(?i)(:)(unsubscribe|subscribe)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        },
        "3": {
          "name": "meta.brace.round.js"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "comment": "Captures the static class before the : of Subscribe ( [ subscriber : ] handler-method )",
          "match": "\\s*([\\w\\#\\$\\%\\-]+(\\.[\\w\\#\\$\\%\\-]+)+)\\s*(:)",
          "captures": {
            "1": {
              "name": "entity.name.type.abl"
            },
            "3": {
              "name": "punctuation.separator.colon.abl"
            }
          }
        },
        {
          "comment": "Captures the variable before the : or , of Subscribe( [ subscriber-handle , ] handler-procedure ) or Subscribe ( [ subscriber : ] handler-method )",
          "match": "\\s*([a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\&]*)\\s*((,)|(:))\\s*",
          "captures": {
            "1": {
              "name": "variable.other.abl"
            },
            "3": {
              "name": "punctuation.separator.comma.abl"
            },
            "4": {
              "name": "punctuation.separator.colon.abl"
            }
          }
        },
        {
          "comment": "Subscribe( handler-procedure or handler-method)",
          "match": "\\s*([a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\&]*)\\s*",
          "captures": {
            "1": {
              "name": "entity.name.function.abl"
            }
          }
        },
        {
          "include": "#string"
        }
      ]
    },
    "release": {
      "begin": "(?i)\\s*(release)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(?=\\.)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "match": "(?i)\\s*(object)\\s+(.*)\\b",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            },
            "2": {
              "name": "variable.other.abl"
            }
          }
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#db-dot-table"
        }
      ]
    },
    "for-record": {
      "comment": "this regex just tries to capture a bunch (6) of tables",
      "match": "(?i)\\s*(for)\\s+([\\w\\-#$%]*)\\s*(,)?\\s*([\\w\\-#$%]*)?\\s*(,)?\\s*([\\w\\-#$%]*)?\\s*(,)?\\s*([\\w\\-#$%]*)?\\s*(,)?\\s*([\\w\\-#$%]*)?\\s*(,)?\\s*([\\w\\-#$%]*)?",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "storage.data.table.abl"
        },
        "3": {
          "name": "punctuation.separator.comma.abl"
        },
        "4": {
          "name": "storage.data.table.abl"
        },
        "5": {
          "name": "punctuation.separator.comma.abl"
        },
        "6": {
          "name": "storage.data.table.abl"
        },
        "7": {
          "name": "punctuation.separator.comma.abl"
        },
        "8": {
          "name": "storage.data.table.abl"
        },
        "9": {
          "name": "punctuation.separator.comma.abl"
        },
        "10": {
          "name": "storage.data.table.abl"
        },
        "11": {
          "name": "punctuation.separator.comma.abl"
        },
        "12": {
          "name": "storage.data.table.abl"
        }
      }
    },
    "on-error-endkey-stop": {
      "name": "meta.block.branch.abl",
      "match": "(?i)\\s*(on)\\s+(endkey|error|stop|quit)\\s+(undo)\\s*(?!leave|next|retry|return|throw)([a-z0-9\\-\\_\\$]*)?\\s*",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        },
        "3": {
          "name": "keyword.other.abl"
        },
        "4": {
          "name": "meta.block.label.abl"
        }
      }
    },
    "branch-leave-next-retry-throw": {
      "name": "meta.block.branch.abl",
      "match": "(?i)\\s*(?<=,)\\s*(leave|next|retry|throw)\\s*(?!on)([a-z0-9\\-\\_\\$]*)?\\s*",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "meta.block.label.abl"
        }
      }
    },
    "branch-return-value-single": {
      "comment": "RETURN 'return-value'",
      "begin": "(?i)\\s*(return)(\\s+(error))?\\s+(')",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        },
        "3": {
          "name": "punctuation.definition.string.begin.abl"
        }
      },
      "name": "string.single.complex.abl",
      "end": "(')",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.abl"
        }
      },
      "patterns": [
        {
          "include": "#escape-char"
        }
      ]
    },
    "escape-char": {
      "match": "~.",
      "name": "constant.character.escape.abl"
    },
    "branch-return-value-double": {
      "name": "meta.block.branch.abl",
      "comment": "RETURN \"return-value\"",
      "begin": "(?i)\\s*(return)(\\s+(error))?\\s+(\")",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        },
        "3": {
          "name": "punctuation.definition.string.begin.abl"
        }
      },
      "end": "(\")",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.abl"
        }
      },
      "patterns": [
        {
          "include": "#escape-char"
        }
      ]
    },
    "branch-return-no-apply": {
      "name": "meta.block.branch.abl",
      "comment": "RETURN NO-APPLY",
      "match": "(?i)\\s*(return)\\s+(no-apply)\\s*",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        }
      }
    },
    "branch-return-error-expression": {
      "name": "meta.block.branch.abl",
      "begin": "(?i)\\s*(return)\\s+(error)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "keyword.other.abl"
        }
      },
      "comment": " This regex captures to the end of the line, or the colon, whichever comes first",
      "end": "(?=\\:|$)",
      "patterns": [
        {
          "match": "(?i)\\b(new)\\s+(.*)\\s*(?=\\($|)",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            },
            "2": {
              "name": "entity.name.type.abl"
            }
          }
        },
        {
          "include": "#property-call"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "undo-statement": {
      "comment": "https://docs.progress.com/bundle/abl-reference/page/UNDO-statement.html",
      "begin": "(?i)\\s*(undo)\\s*([a-z0-9\\-\\_\\$]*)?\\s*(,)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "meta.block.label.abl"
        },
        "3": {
          "name": "punctuation.separator.comma.abl"
        }
      },
      "end": "(?=\\.|\\:)",
      "patterns": [
        {
          "include": "#string"
        },
        {
          "match": "(?i)\\s*(leave|next|retry)\\s([a-z0-9\\-\\_\\$]*)?",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            },
            "2": {
              "name": "meta.block.label.abl"
            }
          }
        },
        {
          "include": "#new-class"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#code-block"
        },
        {
          "include": "#property-call"
        },
        {
          "include": "#function-arguments"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-colon"
        }
      ]
    },
    "branch-options": {
      "name": "meta.block.branch.abl",
      "patterns": [
        {
          "include": "#on-error-endkey-stop"
        },
        {
          "include": "#branch-leave-next-retry-throw"
        },
        {
          "include": "#branch-return-value-double"
        },
        {
          "include": "#branch-return-value-single"
        },
        {
          "include": "#branch-return-no-apply"
        },
        {
          "include": "#branch-return-error-expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "while-expression": {
      "begin": "(?i)\\s*(while)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "end": "(?i)(?=transaction|on|\\:|with)",
      "patterns": [
        {
          "comment": "The comment scopes are included in the statements pattern, but the operator trumps these",
          "include": "#comment"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#property-call"
        },
        {
          "include": "#branch-options"
        },
        {
          "include": "#expression"
        },
        {
          "include": "X-#statements"
        }
      ]
    },
    "analyze-suspend-resume": {
      "begin": "(?i)(\\&analyze-suspend|\\&analyze-resume)\\s*",
      "end": "(?=(?://|/\\*))|$",
      "name": "comment.preprocessor.analyze-suspend.abl"
    },
    "global-scoped-define": {
      "begin": "(?i)(\\&scoped-define|\\&global-define)\\s*([\\.\\w\\\\\/-]*)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "entity.name.function.preprocessor.abl"
        }
      },
      "end": "(?=(?://|/\\*))|$",
      "name": "meta.preprocessor.define.abl",
      "patterns": [
        {
          "include": "#string"
        }
      ]
    },
    "if-then": {
      "begin": "(?i)\\s*(if)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.abl"
        }
      },
      "patterns": [
        {
          "match": "(?i)\\b(and|or)\\b",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "include": "#parens"
        },
        {
          "include": "#function-arguments"
        },
        {
          "include": "#db-dot-table-dot-field"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#code-block"
        },
        {
          "include": "#property-call"
        },
        {
          "include": "#handle-attributes"
        },
        {
          "include": "#keywords"
        }
      ],
      "end": "(?i)\\b(?=then)\\b"
    },
    "function-arguments": {
      "name": "meta.function.arguments.abl",
      "comment": "Captures what's between ( and ) when calling a function, excluding the braces ",
      "begin": "(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "end": "(?=\\))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#parens"
        },
        {
          "match": "(?i)\\s*(input-output|output|input|table-handle|dataset-handle|APPEND|BY-VALUE|BY-REFERENCE|BIND)\\s*",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            }
          }
        },
        {
          "match": "(?i)\\b(table|dataset)\\s+([\\w\\-#$%]+(\\.[\\w\\-#$%]+)?)\\b",
          "captures": {
            "1": {
              "name": "keyword.other.abl"
            },
            "2": {
              "name": "storage.data.table.abl"
            }
          }
        },
        {
          "include": "#constant"
        },
        {
          "include": "#type-reference"
        },
        {
          "include": "#db-dot-table-dot-field"
        },
        {
          "include": "#abl-system-handles"
        },
        {
          "include": "#abl-functions"
        },
        {
          "include": "#unqualified-method-call"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#property-call"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#static-object-property-call"
        }
      ]
    },
    "static-object-property-call": {
      "match": "(?i)\\s*(([\\w\\#\\$\\%\\-]+|progress)(\\.[\\w\\#\\$\\%\\-]+)+)\\s*(:)([\\w-]+)\\s*",
      "commment": "This rule only captures dotted type name and not single class names",
      "captures": {
        "1": {
          "name": "entity.name.type.abl"
        },
        "4": {
          "name": "punctuation.separator.colon.abl"
        },
        "5": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "unqualified-method-call": {
      "match": "\\b([a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\&]*)\\b(?=\\()",
      "captures": {
        "1": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "property-call": {
      "match": "(:)([a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\&]*)\\b",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.abl"
        },
        "2": {
          "name": "entity.name.function.abl"
        }
      }
    },
    "type-member-call": {
      "patterns": [
        {
          "include": "#property-call"
        },
        {
          "include": "#unqualified-method-call"
        },
        {
          "include": "#static-object-property-call"
        }
      ]
    },
    "variable-name": {
      "comment": "1 to 128 characters; can consist of any combination of letters (a-z or A-Z), numbers (0-9), and these special characters: #$-_%& Names must begin with a letter (from https://docs.progress.com/bundle/openedge-abl-manage-applications/page/Name-limits.html)",
      "match": "(?<=^|\\s|\\[|\\()([a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\&]*)",
      "name": "variable.other.abl"
    },
    "extent": {
      "match": "(?i)\\s*(extent)\\s*((0x[0-9a-f]+)|([0-9]+)?)",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "constant.numeric.source.abl"
        }
      }
    },
    "decimals": {
      "match": "(?i)\\s*(decimals)\\s((0x[0-9a-f]+)|([0-9]+)?)",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "constant.numeric.source.abl"
        }
      }
    },
    "ordinal": {
      "match": "(?i)\\s*(ordinal)\\s((0x[0-9a-f]+)|([0-9]+)?)",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "constant.numeric.source.abl"
        }
      }
    },
    "array-literal": {
      "name": "meta.array.literal.abl",
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.square.abl"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.abl"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "array-use": {
      "name": "meta.array.literal.abl",
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.square.abl"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.abl"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#timestamp-constant"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#variable-name"
        },
        {
          "include": "#double-colon-field-name"
        }
      ]
    },
    "parameter-name": {
      "match": "(?<=^|\\s)(\\w|-)+(?=\\s)",
      "name": "variable.parameter.abl"
    },
    "run-statement": {
      "match": "(?i)\\s*(run)\\s+(?!value)(([a-z][a-z0-9\\/\\-\\_\\\\]+)(\\.[a-z]+)?)",
      "captures": {
        "1": {
          "name": "keyword.other.abl"
        },
        "2": {
          "name": "meta.other.procedure.abl"
        }
      }
    },
    "include-file": {
      "name": "meta.include.abl",
      "comment": "https://docs.progress.com/bundle/openedge-abl-reference-122/page/Include-file-reference.html",
      "begin": "(?i)({)\\s*(([a-z][a-z0-9\\/\\-\\_\\\\]+)(\\.[a-z]+)?)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.abl"
        },
        "2": {
          "name": "meta.other.include.abl"
        }
      },
      "end": "\\s*(})\\s*",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.abl"
        }
      },
      "patterns": [
        {
          "include": "#argument-reference"
        },
        {
          "match": "(?<=\\s)(&[a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\.]+)\\s*(=?)",
          "name": "meta.include.argument.abl",
          "comment": "This is intended to catch '&arg' and '&arg=' ",
          "captures": {
            "1": {
              "name": "support.other.argument.abl",
              "comment": "you can use variable names, field names, and reserved words as argument names."
            },
            "2": {
              "name": "keyword.operator.source.abl"
            }
          }
        },
        {
          "include": "#string"
        },
        {
          "match": "(?<=\\s)(&[a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\.]+)\\s*(=?)",
          "comment": "non-string argument values after the &arg = ",
          "name": "meta.include-named-argument",
          "captures": {
            "1": {
              "name": "support.other.argument.abl",
              "comment": "you can use variable names, field names, and reserved words as argument names."
            },
            "2": {
              "name": "keyword.operator.source.abl"
            }
          }
        },
        {
          "include": "#string"
        },
        {
          "match": "(?<=\\s)(&[a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\.]+)\\s*(=?)",
          "comment": "non-string argument values after the &arg = ",
          "name": "meta.include-named-argument",
          "captures": {
            "1": {
              "name": "support.other.argument.abl",
              "comment": "you can use variable names, field names, and reserved words as argument names."
            },
            "2": {
              "name": "keyword.operator.source.abl"
            }
          }
        },
        {
          "match": "(?<=\\s)([a-zA-Z][a-zA-Z0-9\\#\\$\\-\\_\\%\\.\\:]+)\\b",
          "comment": "non-string unnamed argument values",
          "captures": {
            "1": {
              "name": "support.other.argument.abl",
              "comment": "you can use variable names, field names, and reserved words as argument names."
            }
          }
        }
      ]
    },
    "argument-reference": {
      "comment": "https://docs.progress.com/bundle/openedge-abl-reference-122/page/Argument-reference.html",
      "match": "\\s*((\\{\\s*\\&[\\.\\w\\\/-]+\\})|(\\{\\s*\\d+\\})|(\\{\\s*\\*\\}))\\s*",
      "captures": {
        "1": {
          "name": "support.other.argument.abl"
        }
      }
    },
    "comment": {
      "patterns": [
        {
          "include": "#singlelinecomment"
        },
        {
          "include": "#multilinecomment"
        }
      ]
    },
    "singlelinecomment": {
      "match": "\\/\\/.*$",
      "comment": "Was comment.source.abl but should be changed, per https://macromates.com/manual/en/language_grammars",
      "name": "comment.line.double-slash.abl"
    },
    "multilinecomment": {
      "begin": "(?<!=)\\/\\*",
      "contentName": "comment",
      "end": "\\*\\/",
      "name": "comment.block.source.abl",
      "patterns": [
        {
          "include": "#multilinecomment",
          "name": "comment.block.source.abl"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "include": "#singlequotedstring"
        },
        {
          "include": "#doublequotedstring"
        },
        {
          "include": "#translation-attribute"
        }
      ]
    },
    "singlequotedstring": {
      "begin": "(')",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.begin.abl"
        }
      },
      "end": "(?i)(')(:[L|R|T|C|U]\\d*\\b)?",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.abl"
        },
        "2": {
          "name": "support.other.abl"
        }
      },
      "name": "string.single.complex.abl",
      "patterns": [
        {
          "include": "#escape-char"
        }
      ]
    },
    "doublequotedstring": {
      "begin": "(\")",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.begin.abl"
        }
      },
      "end": "(?i)(\")(:[L|R|T|C|U]\\d*\\b)?",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.abl"
        },
        "2": {
          "name": "support.other.abl"
        }
      },
      "name": "string.double.complex.abl",
      "patterns": [
        {
          "include": "#escape-char"
        }
      ]
    },
    "dll-type": {
      "match": "(?i)\\b(byte|unsigned-short|short|unsigned-long|long|int64|float)\\b",
      "captures": {
        "1": {
          "name": "storage.type.abl"
        }
      },
      "comment": "https://docs.progress.com/bundle/openedge-abl-reference-122/page/Data-types.html"
    },
    "primitive-type": {
      "match": "(?i)(?<=^|\\s)(blob|character|characte|charact|charac|chara|char|cha|ch|c|clob|com-handle|date|da|datetime|datetime-tz|decimal|decima|decim|deci|dec|de|handle|int64|integer|intege|integ|inte|int|in|i|logical|logica|logic|logi|log|lo|l|longchar|longcha|longch|memptr|raw|recid|rowid|widget-handle)(?![=\\w-])",
      "captures": {
        "1": {
          "name": "storage.type.abl"
        }
      },
      "comment": "https://docs.progress.com/bundle/openedge-abl-reference-122/page/Data-types.html"
    },
    "numeric": {
      "match": "(?<![\\w-])((0(x|X)[0-9a-fA-F]+)|(\\-?[0-9]+(\\.[0-9]+)?))",
      "name": "constant.numeric.source.abl"
    },
    "abl-system-handles": {
      "match": "(?i)\\s*(this-object|super|self|this-procedure|target-procedure|source-procedure|session|error-status|compiler|audit-control|audit-policy|clipboard|codebase-locator|color-table|debugger|dslog-manager|file-information|file-info|font-table|last-event|log-manager|profiler|rcode-information|rcode-info|security-policy|session|web-context)\\s*(?=:)",
      "captures": {
        "1": {
          "name": "variable.language.abl"
        },
        "2": {
          "name": "punctuation.separator.colon.abl"
        }
      }
    },
    "timestamp-constant": {
      "match": "(?i)(?<=^|\\s*)(today|now)(?!\\w|-)",
      "name": "constant.language.abl"
    },
    "constant": {
      "match": "(?i)(?<=^|\\s|\\()(true|false|yes|no|\\?)(?!\\w|-)",
      "name": "constant.language.abl"
    },
    "punctuation-colon": {
      "name": "punctuation.terminator.abl",
      "match": ":"
    },
    "punctuation-separator": {
      "name": "punctuation.separator.abl",
      "patterns": [
        {
          "include": "#punctuation-comma"
        },
        {
          "match": "(\\:)",
          "captures": {
            "1": {
              "name": "punctuation.separator.colon.abl"
            }
          }
        },
        {
          "match": "(\\.)",
          "captures": {
            "1": {
              "name": "punctuation.separator.period.abl"
            }
          }
        }
      ]
    },
    "punctuation-comma": {
      "captures": {
        "1": {
          "name": "punctuation.separator.comma.abl"
        }
      },
      "match": "(,)"
    },
    "punctuation-semicolon": {
      "captures": {
        "1": {
          "name": "punctuation.terminator.abl"
        }
      },
      "match": "(;)"
    },
    "punctuation-period": {
      "captures": {
        "1": {
          "name": "punctuation.terminator.abl"
        }
      },
      "match": "(\\.)"
    },
    "operator": {
      "patterns": [
        {
          "include": "#operator-no-space"
        },
        {
          "include": "#operator-with-space"
        }
      ]
    },
    "operator-no-space": {
      "match": "(\\+=|-=|\\\\=|\\*=|<=|<>|>=|=|\\+|\\-|\/|<|>|\\*)",
      "captures": {
        "1": {
          "name": "keyword.operator.source.abl"
        }
      }
    },
    "operator-with-space": {
      "match": "(?i)\\s+(contains|begins|matches|eq|le|lt|ge|gt|ne)\\s+",
      "captures": {
        "1": {
          "name": "keyword.operator.source.abl"
        }
      }
    },
    "keywords": {
      "patterns": [
        {
          "include": "#keywords-a"
        },
        {
          "include": "#keywords-b"
        },
        {
          "include": "#keywords-c"
        },
        {
          "include": "#keywords-d"
        },
        {
          "include": "#keywords-e"
        },
        {
          "include": "#keywords-f"
        },
        {
          "include": "#keywords-g"
        },
        {
          "include": "#keywords-h"
        },
        {
          "include": "#keywords-i"
        },
        {
          "include": "#keywords-j"
        },
        {
          "include": "#keywords-k"
        },
        {
          "include": "#keywords-l"
        },
        {
          "include": "#keywords-m"
        },
        {
          "include": "#keywords-n"
        },
        {
          "include": "#keywords-o"
        },
        {
          "include": "#keywords-p"
        },
        {
          "include": "#keywords-q"
        },
        {
          "include": "#keywords-r"
        },
        {
          "include": "#keywords-s"
        },
        {
          "include": "#keywords-t"
        },
        {
          "include": "#keywords-u"
        },
        {
          "include": "#keywords-v"
        },
        {
          "include": "#keywords-w"
        },
        {
          "include": "#keywords-x"
        },
        {
          "include": "#keywords-y"
        }
      ]
    },
    "keywords-a": {
        "match": "(?i)(?<![\\w-])(abort|absolute|absolut|absolu|absol|abso|abs|abstract|accelerator|accept-changes|accept-row-changes|accumulate|accumulat|accumula|accumul|accumu|accum|across|active|active-form|active-window|actor|add|add-buffer|add-calc-column|add-calc-colum|add-calc-colu|add-calc-col|add-columns-from|add-events-procedure|add-events-procedur|add-events-procedu|add-events-proced|add-events-proce|add-events-proc|add-fields-from|add-first|add-header-entry|add-index-field|add-interval|add-last|add-like-column|add-like-colum|add-like-colu|add-like-col|add-like-field|add-like-index|add-new-field|add-new-index|add-parent-id-relation|add-relation|add-relatio|add-relati|add-relat|add-rela|add-rel|add-schema-location|add-source-buffer|add-super-procedure|add-super-procedur|add-super-procedu|add-super-proced|add-super-proce|add-super-proc|adm-data|advise|after-buffer|after-rowid|after-table|aggregate|alert-box|alias|all|allow-column-searching|allow-prev-deserialization|allow-replication|alter|alternate-key|always-on-top|ambiguous|ambiguou|ambiguo|ambigu|ambig|and|ansi-only|any|any-key|any-printable|anywhere|append|append-child|append-line|appl-alert-boxes|appl-alert-boxe|appl-alert-box|appl-alert-bo|appl-alert-b|appl-alert-|appl-alert|appl-context-id|application|apply|apply-callback|appserver-info|appserver-password|appserver-userid|array-message|array-messag|array-messa|array-mess|array-mes|array-me|array-m|as|as-cursor|ascending|ascendin|ascendi|ascend|ascen|asce|asc|ask-overwrite|assembly|assign|async-request-count|async-request-handle|asynchronous|at|attach|attach-data-source|attached-pairlist|attachment|attr-space|attr-spac|attr-spa|attr-sp|attr-s|attr-|attr|attribute-names|attribute-type|audit-control|audit-enabled|audit-event-context|audit-policy|authentication-failed|authorization|auto-completion|auto-completio|auto-completi|auto-complet|auto-comple|auto-compl|auto-comp|auto-delete|auto-delete-xml|auto-end-key|auto-endkey|auto-go|auto-indent|auto-inden|auto-inde|auto-ind|auto-resize|auto-return|auto-retur|auto-retu|auto-ret|auto-synchronize|auto-validate|auto-validat|auto-valida|auto-valid|auto-vali|auto-val|auto-zap|auto-za|auto-z|automatic|available|availabl|availab|availa|avail|available-formats|average|averag|avera|aver|ave|avg)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-b": {
        "match": "(?i)(?<![\\w-])(background|backgroun|backgrou|backgro|backgr|backg|back|back-tab|backspace|backwards|backward|base-ade|base-key|base64|base64-decode|base64-encode|basic-logging|batch|batch-mode|batch-size|before-buffer|before-hide|before-hid|before-hi|before-h|before-rowid|before-table|begin-event-group|begins|bell|bell|between|bgcolor|bgcolo|bgcol|bgco|bgc|big-endian|binary|bind|bind-where|blank|blob|block|block-iteration-display|block-level|block-leve|block-lev|border-bottom|border-botto|border-bott|border-bot|border-bo|border-b|border-bottom-chars|border-bottom-char|border-bottom-cha|border-bottom-ch|border-bottom-c|border-bottom-pixels|border-bottom-pixel|border-bottom-pixe|border-bottom-pix|border-bottom-pi|border-bottom-p|border-left|border-lef|border-le|border-l|border-left-chars|border-left-char|border-left-cha|border-left-ch|border-left-c|border-left-pixels|border-left-pixel|border-left-pixe|border-left-pix|border-left-pi|border-left-p|border-right|border-righ|border-rig|border-ri|border-r|border-right-chars|border-right-char|border-right-cha|border-right-ch|border-right-c|border-right-pixels|border-right-pixel|border-right-pixe|border-right-pix|border-right-pi|border-right-p|border-top|border-to|border-t|border-top-chars|border-top-char|border-top-cha|border-top-ch|border-top-c|border-top-pixels|border-top-pixel|border-top-pixe|border-top-pix|border-top-pi|border-top-p|both|bottom|bottom-column|box|box-selectable|box-selectabl|box-selectab|box-selecta|box-select|break|break-line|browse|browse-column-data-types|browse-column-formats|browse-column-labels|browse-header|btos|buffer|buffer-chars|buffer-compare|buffer-compar|buffer-compa|buffer-comp|buffer-copy|buffer-create|buffer-delete|buffer-export|buffer-export-fields|buffer-field|buffer-group-id|buffer-group-name|buffer-handle|buffer-import|buffer-import-fields|buffer-lines|buffer-name|buffer-nam|buffer-na|buffer-n|buffer-partition-id|buffer-release|buffer-releas|buffer-tenant-id|buffer-tenant-name|buffer-validate|buffer-value|buttons|button|by|by-pointer|by-reference|by-value|by-variant-pointer|by-variant-pointe|by-variant-point|byte|bytes-read|bytes-written)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-c": {
        "match": "(?i)(?<![\\w-])(cache|cache-size|call|call-name|call-type|can-create|can-creat|can-crea|can-delete|can-delet|can-dele|can-do|can-do-domain-support|can-find|can-query|can-read|can-set|can-write|can-writ|cancel-break|cancel-button|cancel-pick|cancel-requests|cancel-requests-after|cancelled|caps|careful-paint|case|case-sensitive|case-sensitiv|case-sensiti|case-sensit|case-sensi|case-sens|case-sen|cast|catch|cdecl|centered|centere|center|chained|character|characte|charact|charac|chara|char|character_length|charset|check|check-mem-stomp|checked|child-buffer|child-num|choices|choose|choose|chr|class|class-type|clear|clear|clear-appl-context|clear-log|clear-selection|clear-selectio|clear-selecti|clear-select|clear-sort-arrows|clear-sort-arrow|client-connection-id|client-principal|client-tty|client-type|client-workstation|clipboard|clob|clone-node|close|close|close-log|code|codebase-locator|codepage|codepage-convert|col|col-of|collate|colon|colon-aligned|colon-aligne|colon-align|color|color-table|columns|column|column-bgcolor|column-bgcolo|column-bgcol|column-bgco|column-bgc|column-codepage|column-dcolor|column-fgcolor|column-fgcolo|column-fgcol|column-fgco|column-fgc|column-font|column-label|column-labe|column-lab|column-label-bgcolor|column-label-bgcolo|column-label-bgcol|column-label-bgco|column-label-bgc|column-label-dcolor|column-label-fgcolor|column-label-fgcolo|column-label-fgcol|column-label-fgco|column-label-fgc|column-label-font|column-label-height-chars|column-label-height-char|column-label-height-cha|column-label-height-ch|column-label-height-c|column-label-height-pixels|column-label-height-pixel|column-label-height-pixe|column-label-height-pix|column-label-height-pi|column-label-height-p|column-movable|column-of|column-pfcolor|column-pfcolo|column-pfcol|column-pfco|column-pfc|column-read-only|column-resizable|column-scrolling|column-scrollin|column-scrolli|column-scroll|column-scrol|column-scro|column-scr|column-sc|com-handle|com-self|combo-box|command|compares|compare|compile|compile|compiler|complete|component-handle|component-self|config-name|connect|connect|connected|constrained|constructor|container-event|contains|contents|context|context-help|context-help-file|context-help-id|context-popup|context-popu|context-pop|control|control-box|control-container|control-containe|control-contain|control-contai|control-conta|control-cont|control-frame|control-fram|convert|convert-3d-colors|convert-3d-color|convert-3d-colo|convert-3d-col|convert-3d-co|convert-3d-c|convert-3d-|convert-3d|convert-to-offset|convert-to-offse|convert-to-offs|copy|copy-dataset|copy-lob|copy-sax-attributes|copy-temp-table|count|count-of|coverage|cpcase|cpcoll|cpinternal|cpinterna|cpintern|cpinter|cpinte|cpint|cplog|cpprint|cprcodein|cprcodeout|cpstream|cpterm|crc-value|crc-valu|crc-val|create|create-like|create-like-sequential|create-node|create-node-namespace|create-on-add|create-result-list-entry|create-test-file|ctos|current|current-changed|current-column|current-environment|current-environmen|current-environme|current-environm|current-environ|current-enviro|current-envir|current-envi|current-env|current-iteration|current-language|current-languag|current-langua|current-langu|current-lang|current-query|current-request-info|current-response-info|current-result-row|current-row-modified|current-value|current-window|current_date|cursor|curso|curs|cursor-char|cursor-down|cursor-left|cursor-line|cursor-offset|cursor-right|cursor-up|cut)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-d": {
        "match": "(?i)(?<![\\w-])(data-bind|data-bin|data-bi|data-b|data-entry-return|data-entry-retur|data-entry-retu|data-entry-ret|data-refresh-line|data-refresh-page|data-relation|data-relatio|data-relati|data-relat|data-rela|data-rel|data-source|data-source-complete-map|data-source-modified|data-source-rowid|data-type|data-typ|data-ty|data-t|database|dataservers|dataset|dataset-handle|date|date-format|date-forma|date-form|date-for|date-fo|date-f|datetime|datetime-tz|day|db-context|db-list|db-references|db-remote-host|dbcodepage|dbcollation|dbname|dbparam|dbrestrictions|dbrestriction|dbrestrictio|dbrestricti|dbrestrict|dbrestric|dbrestri|dbrestr|dbrest|dbtaskid|dbtype|dbversion|dbversio|dbversi|dbvers|dcolor|dde|dde-error|dde-id|dde-i|dde-item|dde-name|dde-notify|dde-topic|deblank|debug|debu|debug-alert|debug-list|debug-set-tenant|debugger|decimal|decima|decim|deci|dec|decimals|declare|declare-namespace|decrypt|define|defin|defi|def|default|default-action|default-buffer-handle|default-button|default-butto|default-butt|default-but|default-commit|default-extension|default-extensio|default-extensi|default-extens|default-exten|default-exte|default-ext|default-ex|default-pop-up|default-string|default-untranslatable|default-value|default-window|defer-lob-fetch|define-user-event-manager|defined|del|delegate|delete|delete|delete-char|delete-char|delete-character|delete-column|delete-current-row|delete-end-line|delete-field|delete-header-entry|delete-line|delete-line|delete-node|delete-result-list-entry|delete-selected-row|delete-selected-rows|delete-word|delimiter|descending|descendin|descendi|descend|descen|desce|desc|description|descriptio|descripti|descript|deselect|deselect-extend|deselect-focused-row|deselect-rows|deselect-selected-row|deselection|deselection-extend|destructor|detach|detach-data-source|dialog-box|dialog-help|dictionary|dictionar|dictiona|diction|dictio|dicti|dict|dir|directory|disable|disable-auto-zap|disable-connections|disable-dump-triggers|disable-load-triggers|disabled|disconnect|disconnec|disconne|disconn|discon|dismiss-menu|display|displa|displ|disp|display-message|display-type|display-typ|display-ty|display-t|display-timezone|distinct|dll-call-type|do|domain-description|domain-name|domain-type|dos|dos-end|dotnet-clr-loaded|double|down|down|drag-enabled|drop|drop-down|drop-down-list|drop-file-notify|drop-target|dslog-manager|dump|dump-logging-now|dynamic|dynamic-cast|dynamic-current-value|dynamic-enum|dynamic-function|dynamic-functio|dynamic-functi|dynamic-funct|dynamic-func|dynamic-invoke|dynamic-new|dynamic-next-value|dynamic-property)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-e": {
        "match": "(?i)(?<![\\w-])(each|echo|edge|edge-chars|edge-char|edge-cha|edge-ch|edge-c|edge-pixels|edge-pixel|edge-pixe|edge-pix|edge-pi|edge-p|edit-can-paste|edit-can-undo|edit-clear|edit-copy|edit-cut|edit-paste|edit-undo|editing|editor|editor-backtab|editor-tab|else|empty|empty-dataset|empty-selection|empty-temp-table|enable|enable-connections|enabled|encode|encode-domain-access-code|encoding|encrypt|encrypt-audit-mac-key|encryption-salt|end|end|end-box-selection|end-document|end-element|end-error|end-event-group|end-file-drop|end-key|end-move|end-resize|end-row-resize|end-search|end-user-prompt|endkey|endkey|enter-menubar|entered|entity-expansion-limit|entry|entry|entry-types-list|enum|eq|error|error|error-column|error-colum|error-colu|error-col|error-object|error-object-detail|error-row|error-stack-trace|error-status|error-statu|error-stat|error-string|escape|etime|event|event-group-id|event-handler|event-handler-context|event-handler-object|event-procedure|event-procedure-context|event-type|event-typ|event-ty|event-t|events|except|exclusive|exclusive-id|exclusive-lock|exclusive-loc|exclusive-lo|exclusive-l|exclusive-web-user|exclusive-web-use|exclusive-web-us|exclusive-web-u|exclusive-web-|exclusive-web|execute|execution-log|exists|exit|exit-code|exp|expand|expandable|expire|explicit|export|export-principal|extended|extent|external|extract)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-f": {
        "match": "(?i)(?<![\\w-])(false|false-leaks|fetch|fetch-selected-row|fgcolor|fgcolo|fgcol|fgco|fgc|fields|field|file|file-access-date|file-access-dat|file-access-da|file-access-d|file-access-time|file-access-tim|file-access-ti|file-access-t|file-create-date|file-create-dat|file-create-da|file-create-d|file-create-time|file-create-tim|file-create-ti|file-create-t|file-information|file-informatio|file-informati|file-informat|file-informa|file-inform|file-infor|file-info|file-mod-date|file-mod-dat|file-mod-da|file-mod-d|file-mod-time|file-mod-tim|file-mod-ti|file-mod-t|file-name|file-offset|file-offse|file-offs|file-off|file-size|file-type|filename|fill|fill-in|fill-mode|fill-where-string|filled|filters|final|finally|find|find|find-by-rowid|find-case-sensitive|find-current|find-first|find-global|find-last|find-next|find-next-occurrence|find-prev-occurrence|find-previous|find-select|find-unique|find-wrap-around|finder|firehose-cursor|first|first-async-request|first-async-reques|first-async-reque|first-async-requ|first-async-req|first-async-re|first-async-r|first-async-|first-async|first-buffer|first-child|first-column|first-data-source|first-dataset|first-form|first-object|first-of|first-procedure|first-procedur|first-procedu|first-proced|first-proce|first-proc|first-query|first-server|first-serve|first-serv|first-server-socket|first-socket|first-tab-item|first-tab-ite|first-tab-it|first-tab-i|fit-last-column|fix-codepage|fixed-only|flags|flat-button|float|focus|focus-in|focused-row|focused-row-selected|font|font-table|for|force-file|foreground|foregroun|foregrou|foregro|foregr|foreg|fore|foreign-key-hidden|format|forma|form|form-input|form-long-input|formatted|formatte|forwards|forward|forward-only|fragment|fragmen|frame|fram|frame-col|frame-db|frame-down|frame-field|frame-file|frame-index|frame-inde|frame-line|frame-name|frame-row|frame-spacing|frame-spacin|frame-spaci|frame-spac|frame-spa|frame-value|frame-valu|frame-val|frame-x|frame-y|frequency|from|from-chars|from-char|from-cha|from-ch|from-c|from-current|from-curren|from-curre|from-curr|from-cur|from-pixels|from-pixel|from-pixe|from-pix|from-pi|from-p|fromnoreorder|full-height|full-height-chars|full-height-char|full-height-cha|full-height-ch|full-height-c|full-height-pixels|full-height-pixel|full-height-pixe|full-height-pix|full-height-pi|full-height-p|full-pathname|full-pathnam|full-pathna|full-pathn|full-width-chars|full-width-char|full-width-cha|full-width-ch|full-width-c|full-width-|full-width|full-width-pixels|full-width-pixel|full-width-pixe|full-width-pix|full-width-pi|full-width-p|function|function-call-type)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-g": {
        "match": "(?i)(?<![\\w-])(gateways|gateway|ge|generate-md5|generate-pbe-key|generate-pbe-salt|generate-random-key|generate-uuid|get|get|get-attr-call-type|get-attribute|get-attribute-node|get-binary-data|get-bits|get-blue-value|get-blue-valu|get-blue-val|get-blue-va|get-blue-v|get-blue-|get-blue|get-browse-column|get-browse-colum|get-browse-colu|get-browse-col|get-buffer-handle|get-byte|get-byte-order|get-bytes|get-bytes-available|get-callback-proc-context|get-callback-proc-name|get-cgi-list|get-cgi-long-value|get-cgi-value|get-changes|get-child|get-child-relation|get-child-relatio|get-child-relati|get-child-relat|get-child-rela|get-child-rel|get-class|get-client|get-codepages|get-codepage|get-collations|get-collation|get-collatio|get-collati|get-collat|get-colla|get-coll|get-column|get-config-value|get-current|get-curren|get-curre|get-curr|get-dataset-buffer|get-db-client|get-dir|get-document-element|get-double|get-dropped-file|get-dynamic|get-effective-tenant-id|get-effective-tenant-name|get-error-column|get-error-row|get-file|get-file-name|get-file-offset|get-file-offse|get-first|get-firs|get-float|get-green-value|get-green-valu|get-green-val|get-green-va|get-green-v|get-green-|get-green|get-header-entry|get-header-entr|get-index-by-namespace-name|get-index-by-qname|get-int64|get-iteration|get-key-value|get-key-valu|get-key-val|get-last|get-localname-by-index|get-long|get-message|get-message-type|get-next|get-node|get-number|get-parent|get-pointer-value|get-prev|get-printers|get-property|get-qname-by-index|get-red-value|get-red-valu|get-red-val|get-red-va|get-red-v|get-red-|get-red|get-relation|get-relatio|get-relati|get-relat|get-rela|get-rel|get-repositioned-row|get-rgb-value|get-rgb-valu|get-rgb-val|get-rgb-va|get-rgb-v|get-rgb-|get-rgb|get-row|get-safe-user|get-selected-widget|get-selected-widge|get-selected-widg|get-selected-wid|get-selected-wi|get-selected-w|get-selected-|get-selected|get-serialized|get-short|get-signature|get-size|get-socket-option|get-source-buffer|get-string|get-tab-item|get-text-height|get-text-height-chars|get-text-height-char|get-text-height-cha|get-text-height-ch|get-text-height-c|get-text-height-pixels|get-text-height-pixel|get-text-height-pixe|get-text-height-pix|get-text-height-pi|get-text-height-p|get-text-width|get-text-width-chars|get-text-width-char|get-text-width-cha|get-text-width-ch|get-text-width-c|get-text-width-pixels|get-text-width-pixel|get-text-width-pixe|get-text-width-pix|get-text-width-pi|get-text-width-p|get-top-buffer|get-type-by-index|get-type-by-namespace-name|get-type-by-qname|get-unsigned-long|get-unsigned-short|get-uri-by-index|get-value-by-index|get-value-by-namespace-name|get-value-by-qname|get-wait-state|get-wait-stat|get-wait-sta|get-wait-st|get-wait-s|get-wait-|get-wait|getbyte|global|go|go-on|go-pending|go-pendin|go-pendi|go-pend|goto|grant|grant-archive|graphic-edge|graphic-edg|graphic-ed|graphic-e|grayed|grid-factor-horizontal|grid-factor-horizonta|grid-factor-horizont|grid-factor-horizon|grid-factor-horizo|grid-factor-horiz|grid-factor-hori|grid-factor-hor|grid-factor-ho|grid-factor-h|grid-factor-vertical|grid-factor-vertica|grid-factor-vertic|grid-factor-verti|grid-factor-vert|grid-factor-ver|grid-factor-ve|grid-factor-v|grid-set|grid-snap|grid-unit-height|grid-unit-height-chars|grid-unit-height-char|grid-unit-height-cha|grid-unit-height-ch|grid-unit-height-c|grid-unit-height-pixels|grid-unit-height-pixel|grid-unit-height-pixe|grid-unit-height-pix|grid-unit-height-pi|grid-unit-height-p|grid-unit-width|grid-unit-width-chars|grid-unit-width-char|grid-unit-width-cha|grid-unit-width-ch|grid-unit-width-c|grid-unit-width-pixels|grid-unit-width-pixel|grid-unit-width-pixe|grid-unit-width-pix|grid-unit-width-pi|grid-unit-width-p|grid-visible|group|group-box|gt|guid)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-h": {
        "match": "(?i)(?<![\\w-])(handle|handler|has-lobs|has-records|hash-code|having|header|height|height-chars|height-char|height-cha|height-ch|height-c|height-pixels|height-pixel|height-pixe|height-pix|height-pi|height-p|help|help|help-context|help-contex|help-conte|help-cont|help-con|help-topic|helpfile-name|helpfile-nam|helpfile-na|helpfile-n|hex-decode|hex-encode|hidden|hide|hint|home|horizontal|horizonta|horizont|horizon|horizo|horiz|hori|horiz-end|horiz-home|horiz-scroll-drag|host-byte-order|html-charset|html-end-of-line|html-end-of-page|html-frame-begin|html-frame-end|html-header-begin|html-header-end|html-title-begin|html-title-end|hwnd)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-i": {
        "match": "(?i)(?<![\\w-])(icfparameter|icfparamete|icfparamet|icfparame|icfparam|icon|if|ignore-current-modified|ignore-current-modifie|ignore-current-modifi|ignore-current-modif|ignore-current-modi|ignore-current-mod|image|image-down|image-insensitive|image-size|image-size-chars|image-size-char|image-size-cha|image-size-ch|image-size-c|image-size-pixels|image-size-pixel|image-size-pixe|image-size-pix|image-size-pi|image-size-p|image-up|immediate-display|implements|import|import-node|import-principal|in|in-handle|increment-exclusive-id|index|index-hint|index-information|index-informatio|index-informati|index-informat|index-informa|index-inform|index-infor|index-info|indexed-reposition|indicator|information|informatio|informati|informat|informa|inform|infor|info|inherit-bgcolor|inherit-bgcolo|inherit-bgcol|inherit-bgco|inherit-bgc|inherit-color-mode|inherit-fgcolor|inherit-fgcolo|inherit-fgcol|inherit-fgco|inherit-fgc|inherits|init|initial|initial-dir|initial-filter|initialize|initialize-document-type|initiate|inner|inner-chars|inner-lines|input|input-output|input-outpu|input-outp|input-out|input-ou|input-o|input-value|insert|insert-attribute|insert-backtab|insert-backta|insert-backt|insert-back|insert-bac|insert-ba|insert-b|insert-before|insert-column|insert-field|insert-field-data|insert-field-label|insert-file|insert-mode|insert-row|insert-string|insert-tab|insert-ta|insert-t|instantiating-procedure|integer|intege|integ|inte|int|int64|interface|internal-entries|interval|into|invoke|is|is-attr-space|is-attr-spac|is-attr-spa|is-attr-sp|is-attr-s|is-attr-|is-attr|is-class|is-clas|is-codepage-fixed|is-column-codepage|is-db-multi-tenant|is-json|is-lead-byte|is-multi-tenant|is-open|is-parameter-set|is-partitioned|is-partitione|is-row-selected|is-selected|is-xml|iso-date|item|items-per-row|iteration-changed)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-j": {
        "match": "(?i)(?<![\\w-])(join|join-by-sqldb|join-on-select)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-k": {
        "match": "(?i)(?<![\\w-])(kblabel|keep-connection-open|keep-frame-z-order|keep-frame-z-orde|keep-frame-z-ord|keep-frame-z-or|keep-frame-z-o|keep-frame-z-|keep-frame-z|keep-messages|keep-security-cache|keep-tab-order|key|key-code|key-function|key-functio|key-functi|key-funct|key-func|key-label|keycache-join|keycode|keyfunction|keyfunctio|keyfuncti|keyfunct|keyfunc|keylabel|keys|keyword|keyword-all)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-l": {
        "match": "(?i)(?<![\\w-])(label|label-bgcolor|label-bgcolo|label-bgcol|label-bgco|label-bgc|label-dcolor|label-dcolo|label-dcol|label-dco|label-dc|label-fgcolor|label-fgcolo|label-fgcol|label-fgco|label-fgc|label-font|label-pfcolor|label-pfcolo|label-pfcol|label-pfco|label-pfc|labels|labels-have-colons|landscape|languages|language|large|large-to-small|last|last-async-request|last-async-reques|last-async-reque|last-async-requ|last-async-req|last-async-re|last-async-r|last-async-|last-async|last-batch|last-child|last-event|last-even|last-form|last-key|last-object|last-of|last-procedure|last-procedur|last-procedu|last-proced|last-proce|last-server|last-serve|last-serv|last-server-socket|last-socket|last-tab-item|last-tab-ite|last-tab-it|last-tab-i|lastkey|lc|ldbname|le|leading|leak-detection|leave|leave|left|left|left-aligned|left-aligne|left-align|left-end|left-trim|length|library|library-calling-convention|like|like-sequential|line|line-counter|line-counte|line-count|line-down|line-left|line-right|line-up|list-events|list-item-pairs|list-items|list-property-names|list-query-attrs|list-set-attrs|list-widgets|listing|listin|listi|listings|literal-question|little-endian|load|load-domains|load-from|load-icon|load-image|load-image-down|load-image-insensitive|load-image-up|load-mouse-pointer|load-mouse-pointe|load-mouse-point|load-mouse-poin|load-mouse-poi|load-mouse-po|load-mouse-p|load-picture|load-result-into|load-small-icon|lob-dir|local-host|local-name|local-port|local-version-info|locator-column-number|locator-line-number|locator-public-id|locator-system-id|locator-type|lock-registration|locked|log|log-audit-event|log-entry-types|log-id|log-manager|log-threshold|logfile-name|logging-level|logical|login-expiration-timestamp|login-host|login-state|logout|long|longchar|longcha|longch|longchar-to-node-value|lookahead|lookup|lower|lt)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-m": {
        "match": "(?i)(?<![\\w-])(machine-class|main-menu|mandatory|manual-highlight|map|margin-extra|margin-height|margin-height-chars|margin-height-char|margin-height-cha|margin-height-ch|margin-height-c|margin-height-pixels|margin-height-pixel|margin-height-pixe|margin-height-pix|margin-height-pi|margin-height-p|margin-width|margin-width-chars|margin-width-char|margin-width-cha|margin-width-ch|margin-width-c|margin-width-pixels|margin-width-pixel|margin-width-pixe|margin-width-pix|margin-width-pi|margin-width-p|mark-new|mark-row-state|matches|max|max-button|max-chars|max-data-guess|max-height|max-height-chars|max-height-char|max-height-cha|max-height-ch|max-height-c|max-height-pixels|max-height-pixel|max-height-pixe|max-height-pix|max-height-pi|max-height-p|max-rows|max-size|max-value|max-valu|max-val|max-width|max-width-chars|max-width-char|max-width-cha|max-width-ch|max-width-c|max-width-pixels|max-width-pixel|max-width-pixe|max-width-pix|max-width-pi|max-width-p|maximize|maximum|maximum-level|md5-digest|md5-value|member|memptr|memptr-to-node-value|menu|menu-bar|menu-drop|menu-item|menu-key|menu-ke|menu-k|menu-mouse|menu-mous|menu-mou|menu-mo|menu-m|menubar|merge-by-field|merge-changes|merge-row-changes|message|message-area|message-area-font|message-area-msg|message-digest|message-line|message-lines|method|minimum|minimu|minim|mini|min|min-button|min-column-width-chars|min-column-width-char|min-column-width-cha|min-column-width-ch|min-column-width-c|min-column-width-pixels|min-column-width-pixel|min-column-width-pixe|min-column-width-pix|min-column-width-pi|min-column-width-p|min-height|min-height-chars|min-height-char|min-height-cha|min-height-ch|min-height-c|min-height-pixels|min-height-pixel|min-height-pixe|min-height-pix|min-height-pi|min-height-p|min-schema-marshall|min-schema-marshal|min-size|min-value|min-valu|min-val|min-width|min-width-chars|min-width-char|min-width-cha|min-width-ch|min-width-c|min-width-pixels|min-width-pixel|min-width-pixe|min-width-pix|min-width-pi|min-width-p|mod|modified|modulo|month|mouse|mouse-pointer|mouse-pointe|mouse-point|mouse-poin|mouse-poi|mouse-po|mouse-p|movable|move|move-after-tab-item|move-after-tab-ite|move-after-tab-it|move-after-tab-i|move-after-tab-|move-after-tab|move-after-ta|move-after-t|move-after-|move-after|move-before-tab-item|move-before-tab-ite|move-before-tab-it|move-before-tab-i|move-before-tab-|move-before-tab|move-before-ta|move-before-t|move-before-|move-before|move-befor|move-column|move-colum|move-colu|move-col|move-to-bottom|move-to-botto|move-to-bott|move-to-bot|move-to-bo|move-to-b|move-to-eof|move-to-top|move-to-to|move-to-t|mpe|mtime|multi-compile|multiple|multiple-key|multitasking-interval|must-exist|must-understand)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-n": {
        "match": "(?i)(?<![\\w-])(name|namespace-prefix|namespace-uri|native|ne|needs-appserver-prompt|needs-prompt|nested|new|new|new-instance|new-line|new-row|next|next-column|next-colum|next-colu|next-col|next-error|next-frame|next-prompt|next-rowid|next-sibling|next-tab-item|next-tab-ite|next-value|next-word|no|no-apply|no-array-message|no-array-messag|no-array-messa|no-array-mess|no-array-mes|no-array-me|no-array-m|no-assign|no-attr|no-attr-list|no-attr-lis|no-attr-li|no-attr-l|no-attr-space|no-attr-spac|no-attr-spa|no-attr-sp|no-attr-s|no-auto-trim|no-auto-tri|no-auto-validate|no-bind-where|no-box|no-column-scrolling|no-column-scrollin|no-column-scrolli|no-column-scroll|no-column-scrol|no-column-scro|no-column-scr|no-column-sc|no-console|no-convert|no-convert-3d-colors|no-convert-3d-color|no-convert-3d-colo|no-convert-3d-col|no-convert-3d-co|no-convert-3d-c|no-convert-3d-|no-convert-3d|no-current-value|no-debug|no-drag|no-echo|no-empty-space|no-error|no-fill|no-fil|no-fi|no-f|no-firehose-cursor|no-focus|no-help|no-hide|no-index-hint|no-inherit-bgcolor|no-inherit-bgcolo|no-inherit-bgcol|no-inherit-bgco|no-inherit-bgc|no-inherit-fgcolor|no-inherit-fgcolo|no-inherit-fgcol|no-inherit-fgco|no-inherit-fgc|no-join-by-sqldb|no-keycache-join|no-labels|no-label|no-lobs|no-lock|no-lookahead|no-map|no-message|no-messag|no-messa|no-mess|no-mes|no-pause|no-prefetch|no-prefetc|no-prefet|no-prefe|no-query-order-added|no-query-order-adde|no-query-order-add|no-query-order-ad|no-query-order-a|no-query-order-|no-query-order|no-query-orde|no-query-ord|no-query-or|no-query-o|no-query-unique-added|no-query-unique-adde|no-query-unique-add|no-query-unique-ad|no-query-unique-a|no-query-unique-|no-query-unique|no-query-uniqu|no-query-uniq|no-query-uni|no-query-un|no-query-u|no-return-value|no-return-valu|no-return-val|no-row-markers|no-schema-marshall|no-schema-marshal|no-scrollbar-vertical|no-scrollbar-vertica|no-scrollbar-vertic|no-scrollbar-verti|no-scrollbar-vert|no-scrollbar-ver|no-scrollbar-ve|no-scrollbar-v|no-scrolling|no-separate-connection|no-separators|no-tab-stop|no-tab-sto|no-tab-st|no-tab-s|no-tab-|no-tab|no-underline|no-underlin|no-underli|no-underl|no-under|no-unde|no-und|no-undo|no-validate|no-validat|no-valida|no-valid|no-vali|no-val|no-wait|no-word-wrap|node-type|node-value|node-value-to-longchar|node-value-to-memptr|non-serializable|nonamespace-schema-location|none|normalize|not|not-active|now|null|num-aliases|num-aliase|num-alias|num-alia|num-ali|num-buffers|num-buttons|num-button|num-butto|num-butt|num-but|num-child-relations|num-children|num-columns|num-column|num-colum|num-colu|num-col|num-copies|num-dbs|num-dropped-files|num-entries|num-fields|num-formats|num-header-entries|num-items|num-iterations|num-lines|num-locked-columns|num-locked-column|num-locked-colum|num-locked-colu|num-locked-col|num-log-files|num-messages|num-parameters|num-references|num-relations|num-replaced|num-replace|num-replac|num-repla|num-repl|num-results|num-selected|num-selected-rows|num-selected-widgets|num-source-buffers|num-tabs|num-to-retain|num-top-buffers|num-visible-columns|num-visible-column|num-visible-colum|num-visible-colu|num-visible-col|numeric|numeric-decimal-point|numeric-decimal-poin|numeric-decimal-poi|numeric-decimal-po|numeric-decimal-p|numeric-decimal-|numeric-decimal|numeric-decima|numeric-decim|numeric-deci|numeric-dec|numeric-format|numeric-forma|numeric-form|numeric-for|numeric-fo|numeric-f|numeric-separator|numeric-separato|numeric-separat|numeric-separa|numeric-separ|numeric-sepa|numeric-sep)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-o": {
        "match": "(?i)(?<![\\w-])(object|octet_length|of|off|off-end|off-home|ok|ok-cancel|old|ole-invoke-locale|ole-invoke-local|ole-invoke-loca|ole-names-locale|ole-names-local|ole-names-loca|on|on-frame-border|on-frame-borde|on-frame-bord|on-frame-bor|on-frame-bo|on-frame-b|on-frame-|on-frame|open|open-line-above|opsys|option|options|options|options-file|or|ordered-join|ordinal|orientation|origin-handle|origin-rowid|os-append|os-command|os-copy|os-create-dir|os-delete|os-dir|os-drives|os-drive|os-error|os-getenv|os-rename|os2|os400|otherwise|out-of-data|outer|outer-join|output|overlay|override|owner|owner-document)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-p": {
        "match": "(?i)(?<![\\w-])(package-private|package-protected|page|page-bottom|page-botto|page-bott|page-bot|page-down|page-left|page-number|page-numbe|page-numb|page-num|page-right|page-right-text|page-size|page-top|page-up|page-width|page-widt|page-wid|paged|parameter|paramete|paramet|parame|param|parent|parent-buffer|parent-fields-after|parent-fields-before|parent-id-field|parent-id-relation|parent-relation|parent-relatio|parent-relati|parent-relat|parent-rela|parent-rel|parent-window-close|parse-status|partial-key|pascal|password-field|paste|pathname|pause|pbe-hash-algorithm|pbe-hash-algorith|pbe-hash-algorit|pbe-hash-algori|pbe-hash-algor|pbe-hash-algo|pbe-hash-alg|pbe-key-rounds|pdbname|performance|performanc|performan|performa|perform|perfor|perfo|perf|persistent|persisten|persiste|persist|persistent-cache-disabled|persistent-procedure|pfcolor|pfcolo|pfcol|pfco|pfc|pick|pick-area|pick-both|pixels|pixels-per-column|pixels-per-colum|pixels-per-colu|pixels-per-col|pixels-per-row|popup-menu|popup-men|popup-me|popup-m|popup-only|popup-onl|popup-on|popup-o|portrait|position|precision|prefer-dataset|prepare-string|prepared|preprocess|preproces|preproce|preproc|preselect|preselec|presele|presel|prev|prev-column|prev-colum|prev-colu|prev-col|prev-frame|prev-sibling|prev-tab-item|prev-tab-ite|prev-tab-it|prev-tab-i|prev-word|primary|primary-passphrase|printer|printer-control-handle|printer-hdc|printer-name|printer-port|printer-setup|private|private-data|private-dat|private-da|private-d|privileges|proc-handle|proc-handl|proc-hand|proc-han|proc-ha|proc-status|proc-statu|proc-stat|proc-sta|proc-st|procedure|procedur|procedu|proced|proce|procedure-call-type|procedure-complete|procedure-name|procedure-type|process|process-architecture|profile-file|profiler|profiling|program-name|progress|progress-source|progress-sourc|progress-sour|progress-sou|progress-so|progress-s|prompt|prompt-for|prompt-fo|prompt-f|promsgs|propath|property|protected|proversion|proversio|proversi|provers|proxy|proxy-password|proxy-userid|public|public-id|publish|published-events|put|put|put-bits|put-byte|put-bytes|put-double|put-float|put-int64|put-key-value|put-key-valu|put-key-val|put-long|put-short|put-string|put-unsigned-long|put-unsigned-short|putbyte)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-q": {
        "match": "(?i)(?<![\\w-])(qualified-user-id|query|query-close|query-off-end|query-open|query-prepare|query-tuning|question|quit|quoter)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-r": {
        "match": "(?i)(?<![\\w-])(r-index|radio-buttons|radio-set|random|raw|raw-transfer|rcode-information|rcode-informatio|rcode-informati|rcode-informat|rcode-informa|rcode-inform|rcode-infor|rcode-info|read|read-available|read-exact-num|read-file|read-json|read-only|read-response|read-xml|read-xmlschema|readkey|real|recall|recid|record-length|record-lengt|record-leng|record-len|rectangle|rectangl|rectang|rectan|recta|rect|recursive|reference-only|refresh|refresh-audit-policy|refreshable|register-domain|reinstate|reject-changes|reject-row-changes|rejected|relation-fields|relation-field|relation-fiel|relation-fie|relation-fi|relations-active|release|remote|remote-host|remote-port|remove-attribute|remove-child|remove-events-procedure|remove-events-procedur|remove-events-procedu|remove-events-proced|remove-events-proce|remove-events-proc|remove-super-procedure|remove-super-procedur|remove-super-procedu|remove-super-proced|remove-super-proce|remove-super-proc|repeat|replace|replace|replace-child|replace-selection-text|replication-create|replication-delete|replication-write|reports|reposition|reposition-backwards|reposition-backward|reposition-backwar|reposition-backwa|reposition-backw|reposition-back|reposition-forwards|reposition-forward|reposition-forwar|reposition-forwa|reposition-forw|reposition-parent-relation|reposition-parent-relatio|reposition-parent-relati|reposition-parent-relat|reposition-parent-rela|reposition-parent-rel|reposition-to-row|reposition-to-rowid|request|request-info|reset|resizable|resizabl|resizab|resiza|resize|response-info|restart-row|restart-rowid|result|resume-display|retain|retain-shape|retain-shap|retain-sha|retain-sh|retain-s|retry|retry-cancel|return|return|return-inserted|return-inserte|return-insert|return-inser|return-inse|return-ins|return-to-start-dir|return-to-start-di|return-value|return-valu|return-val|return-value-data-type|return-value-dll-type|returns|reverse-from|revert|revoke|rgb-value|rgb-valu|rgb-val|rgb-va|rgb-v|right|right|right-aligned|right-aligne|right-align|right-end|right-trim|role|roles|round|rounded|routine-level|row|row-created|row-deleted|row-display|row-entry|row-height|row-height-chars|row-height-char|row-height-cha|row-height-ch|row-height-c|row-height-pixels|row-height-pixel|row-height-pixe|row-height-pix|row-height-pi|row-height-p|row-leave|row-markers|row-marker|row-marke|row-mark|row-mar|row-ma|row-modified|row-of|row-resizable|row-state|row-unmodified|rowid|rule|rule-row|rule-y|run|run-procedure|run-procedur|run-procedu|run-proced|run-proce|run-proc)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-s": {
        "match": "(?i)(?<![\\w-])(save|save-as|save-as|save-file|save-row-changes|save-where-string|sax-attributes|sax-complete|sax-complet|sax-comple|sax-parse|sax-parse-first|sax-parse-next|sax-parser-error|sax-reader|sax-running|sax-uninitialized|sax-write-begin|sax-write-complete|sax-write-content|sax-write-element|sax-write-error|sax-write-idle|sax-write-tag|sax-writer|sax-xml|schema|schema-change|schema-location|schema-marshal|schema-path|screen|screen-io|screen-lines|screen-value|screen-valu|screen-val|scroll|scroll-bars|scroll-horizontal|scroll-left|scroll-mode|scroll-notify|scroll-right|scroll-to-current-row|scroll-to-item|scroll-to-ite|scroll-to-it|scroll-to-i|scroll-to-selected-row|scroll-vertical|scrollable|scrollbar-drag|scrollbar-horizontal|scrollbar-horizonta|scrollbar-horizont|scrollbar-horizon|scrollbar-horizo|scrollbar-horiz|scrollbar-hori|scrollbar-hor|scrollbar-ho|scrollbar-h|scrollbar-vertical|scrollbar-vertica|scrollbar-vertic|scrollbar-verti|scrollbar-vert|scrollbar-ver|scrollbar-ve|scrollbar-v|scrolled-row-position|scrolled-row-positio|scrolled-row-positi|scrolled-row-posit|scrolled-row-posi|scrolled-row-pos|scrolling|sdbname|seal|seal-timestamp|search|search-self|search-target|section|security-policy|seek|select|select|select-all|select-extend|select-focused-row|select-next-row|select-on-join|select-prev-row|select-repositioned-row|select-row|selectable|selected|selected-items|selection|selection-end|selection-extend|selection-list|selection-start|selection-text|self|send|sensitive|separate-connection|separator-fgcolor|separator-fgcolo|separator-fgcol|separator-fgco|separator-fgc|separators|serializable|serialize-hidden|serialize-name|serialize-row|server|server-connection-bound|server-connection-boun|server-connection-bou|server-connection-bo|server-connection-bound-request|server-connection-bound-reques|server-connection-bound-reque|server-connection-bound-requ|server-connection-bound-req|server-connection-bound-re|server-connection-context|server-connection-contex|server-connection-conte|server-connection-cont|server-connection-con|server-connection-co|server-connection-id|server-operating-mode|server-socket|session|session-end|session-id|set|set-actor|set-appl-context|set-attr-call-type|set-attribute|set-attribute-node|set-blue-value|set-blue-valu|set-blue-val|set-blue-va|set-blue-v|set-blue-|set-blue|set-break|set-buffers|set-byte-order|set-callback|set-callback-procedure|set-cell-focus|set-client|set-commit|set-connect-procedure|set-contents|set-db-client|set-db-logging|set-dynamic|set-effective-tenant|set-event-manager-option|set-green-value|set-green-valu|set-green-val|set-green-va|set-green-v|set-green-|set-green|set-input-source|set-must-understand|set-node|set-numeric-format|set-numeric-forma|set-numeric-form|set-option|set-output-destination|set-parameter|set-pointer-value|set-pointer-valu|set-pointer-val|set-property|set-read-response-procedure|set-red-value|set-red-valu|set-red-val|set-red-va|set-red-v|set-red-|set-red|set-repositioned-row|set-rgb-value|set-rgb-valu|set-rgb-val|set-rgb-va|set-rgb-v|set-rgb-|set-rgb|set-role|set-rollback|set-safe-user|set-selection|set-serialized|set-size|set-socket-option|set-sort-arrow|set-state|set-wait-state|set-wait-stat|set-wait-sta|set-wait-st|set-wait-s|set-wait-|set-wait|settings|setuserid|setuseri|setuser|sha1-digest|share-lock|share-loc|share-lo|share-l|share-|share|shared|short|show-in-taskbar|show-in-taskba|show-in-taskb|show-in-task|show-stats|show-stat|side-label|side-labe|side-lab|side-label-handle|side-label-handl|side-label-hand|side-label-han|side-label-ha|side-label-h|side-labels|signature|signature-value|silent|simple|single|single-character|single-run|singleton|size|size-chars|size-char|size-cha|size-ch|size-c|size-pixels|size-pixel|size-pixe|size-pix|size-pi|size-p|skip|skip-deleted-record|skip-deleted-recor|skip-deleted-reco|skip-deleted-rec|skip-group-duplicates|skip-schema-check|slider|small-icon|small-title|smallint|soap-fault|soap-fault-actor|soap-fault-code|soap-fault-detail|soap-fault-misunderstood-header|soap-fault-node|soap-fault-role|soap-fault-string|soap-fault-subcode|soap-header|soap-header-entryref|soap-version|socket|some|sort|sort-ascending|sort-number|source|source-procedure|space|sql|sqrt|ssl-server-name|standalone|start|start-box-selection|start-document|start-element|start-extend-box-selection|start-mem-check|start-move|start-resize|start-row-resize|start-search|starting|startup-parameters|state-detail|static|statistics|status|status-area|status-area-font|status-area-msg|stdcall|stomp-detection|stomp-frequency|stop|stop|stop-after|stop-display|stop-mem-check|stop-object|stop-parsing|stopped|stoppe|stored-procedure|stored-procedur|stored-procedu|stored-proced|stored-proce|stored-proc|stream|stream-handle|stream-io|stretch-to-fit|strict|strict-entity-resolution|string|string-value|string-xref|sub-average|sub-averag|sub-avera|sub-aver|sub-ave|sub-count|sub-maximum|sub-maximu|sub-maxim|sub-maxi|sub-max|sub-menu|sub-menu-help|sub-minimum|sub-minimu|sub-minim|sub-mini|sub-min|sub-total|subscribe|substitute|substitut|substitu|substit|substi|subst|substring|substrin|substri|substr|subtype|sum|summary|super|super-procedures|super-procedure|super-procedur|super-procedu|super-proced|super-proce|super-proc|suppress-namespace-processing|suppress-warnings|suppress-warning|suppress-warnin|suppress-warni|suppress-warn|suppress-war|suppress-wa|suppress-w|suppress-warnings-list|suspend|symmetric-encryption-aad|symmetric-encryption-algorithm|symmetric-encryption-iv|symmetric-encryption-key|symmetric-support|synchronize|system-alert-boxes|system-alert-boxe|system-alert-box|system-alert-bo|system-alert-b|system-alert-|system-alert|system-dialog|system-help|system-id)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-t": {
        "match": "(?i)(?<![\\w-])(tab|tab-position|tab-stop|table|table-crc-list|table-handle|table-list|table-number|table-numbe|table-numb|table-num|table-scan|target|target-procedure|temp-directory|temp-director|temp-directo|temp-direct|temp-direc|temp-dire|temp-dir|temp-table|temp-table-prepare|temp-table-prepar|tenant|tenant-id|tenant-name|tenant-name-to-id|tenant-where|term|terminal|terminate|text|text-cursor|text-seg-growth|text-seg-growt|text-seg-grow|text-seg-gro|text-seg-gr|text-seg-g|text-seg-|text-seg|text-selected|then|this-object|this-procedure|thread-safe|three-d|through|throw|thru|tic-marks|time|time-source|timezone|title|title-bgcolor|title-bgcolo|title-bgcol|title-bgco|title-bgc|title-dcolor|title-dcolo|title-dcol|title-dco|title-dc|title-fgcolor|title-fgcolo|title-fgcol|title-fgco|title-fgc|title-font|title-fon|title-fo|to|to-rowid|today|toggle-box|tooltip|tooltips|top|top-column|top-nav-query|top-only|topic|total|trace-filter|tracing|tracking-changes|trailing|trans|trans-init-procedure|trans-init-procedur|trans-init-procedu|trans-init-proced|trans-init-proce|trans-init-proc|transaction|transactio|transacti|transact|transaction-mode|transparent|transparen|transpare|transpar|trigger|triggers|trim|true|truncate|truncat|trunca|trunc|ttcodepage|type|type-of)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-u": {
        "match": "(?i)(?<![\\w-])(unbox|unbuffered|unbuffere|unbuffer|unbuffe|unbuff|underline|underlin|underli|underl|undo|undo-throw-scope|unformatted|unformatte|unformatt|unformat|unforma|unform|union|unique|unique-id|unique-match|unix|unix-end|unless-hidden|unload|unsigned-byte|unsigned-int64|unsigned-integer|unsigned-long|unsigned-short|unsubscribe|up|up|update|update-attribute|upper|url|url-decode|url-encode|url-password|url-userid|use|use-dict-exps|use-dict-exp|use-dict-ex|use-dict-e|use-dict-|use-dict|use-dic|use-filename|use-index|use-revvideo|use-text|use-underline|use-widget-pool|user|user-data|user-id|userid|using|utc-offset)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-v": {
        "match": "(?i)(?<![\\w-])(v6display|v6frame|valid-event|valid-handle|valid-object|validate|validate-domain-access-code|validate-expression|validate-expressio|validate-message|validate-seal|validate-xml|validation-enabled|value|value-changed|values|var|variable|variabl|variab|varia|vari|verbose|verbos|verbo|verb|version|vertical|vertica|vertic|verti|vert|view|view-as|view-first-column-on-reopen|virtual-height|virtual-height-chars|virtual-height-char|virtual-height-cha|virtual-height-ch|virtual-height-c|virtual-height-pixels|virtual-height-pixel|virtual-height-pixe|virtual-height-pix|virtual-height-pi|virtual-height-p|virtual-width|virtual-width-chars|virtual-width-char|virtual-width-cha|virtual-width-ch|virtual-width-c|virtual-width-pixels|virtual-width-pixel|virtual-width-pixe|virtual-width-pix|virtual-width-pi|virtual-width-p|visible|vms|void)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-w": {
        "match": "(?i)(?<![\\w-])(wait|wait-for|warning|wc-admin-app|web-context|web-contex|web-conte|web-cont|web-con|web-notify|weekday|when|where|where-string|while|widget|widget-enter|widget-ente|widget-ent|widget-en|widget-e|widget-handle|widget-handl|widget-hand|widget-han|widget-ha|widget-h|widget-id|widget-leave|widget-leav|widget-lea|widget-le|widget-l|widget-pool|width|width-chars|width-char|width-cha|width-ch|width-c|width-pixels|width-pixel|width-pixe|width-pix|width-pi|width-p|window|window-close|window-delayed-minimize|window-delayed-minimiz|window-delayed-minimi|window-delayed-minim|window-delayed-mini|window-delayed-min|window-maximized|window-maximize|window-maximiz|window-maximi|window-maxim|window-maximized|window-minimized|window-minimize|window-minimiz|window-minimi|window-minim|window-minimized|window-name|window-normal|window-resized|window-restored|window-state|window-stat|window-sta|window-system|window-syste|window-syst|window-sys|with|word-index|word-wrap|work-area-height-pixels|work-area-height-pixel|work-area-height-pixe|work-area-height-pix|work-area-height-pi|work-area-height-p|work-area-width-pixels|work-area-width-pixel|work-area-width-pixe|work-area-width-pix|work-area-width-pi|work-area-width-p|work-area-x|work-area-y|work-table|work-tabl|work-tab|workfile|write|write-cdata|write-characters|write-comment|write-data|write-data-element|write-empty-element|write-entity-ref|write-external-dtd|write-fragment|write-json|write-message|write-processing-instruction|write-status|write-xml|write-xmlschema)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-x": {
        "match": "(?i)(?<![\\w-])(x|x-document|x-noderef|x-of|xcode|xcode-session-key|xml-data-type|xml-entity-expansion-limit|xml-node-name|xml-node-type|xml-schema-path|xml-schema-pat|xml-strict-entity-resolution|xml-suppress-namespace-processing|xor|xref|xref-xml)(?![\\w-])",
        "name": "keyword.other.abl"
    },
    "keywords-y": {
        "match": "(?i)(?<![\\w-])(y|y-of|year|year-offset|yes|yes-no|yes-no-cancel)(?![\\w-])",
        "name": "keyword.other.abl"
    }
  },
  "scopeName": "source.abl",
  "uuid": "075bb86e-03ea-4fea-bac0-e11b9dc73e03"
}